import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { MockContractWithNoDefaultPayable, MockContractWithNoDefaultPayableInterface } from "../../test/MockContractWithNoDefaultPayable";
type MockContractWithNoDefaultPayableConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockContractWithNoDefaultPayable__factory extends ContractFactory {
    constructor(...args: MockContractWithNoDefaultPayableConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<MockContractWithNoDefaultPayable & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): MockContractWithNoDefaultPayable__factory;
    static readonly bytecode = "0x6080604052348015600f57600080fd5b50605980601d6000396000f3fe608060405260043610601c5760003560e01c80634148cf15146021575b600080fd5b00fea2646970667358221220c15b58c2e5eac49488607f8edcccff82ebe8b5043f9ba1f14be614d3da00858b64736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "customPayable";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): MockContractWithNoDefaultPayableInterface;
    static connect(address: string, runner?: ContractRunner | null): MockContractWithNoDefaultPayable;
}
export {};
//# sourceMappingURL=MockContractWithNoDefaultPayable__factory.d.ts.map