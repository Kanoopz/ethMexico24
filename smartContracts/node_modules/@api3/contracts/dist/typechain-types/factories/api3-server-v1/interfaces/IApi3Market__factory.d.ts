import { type ContractRunner } from "ethers";
import type { IApi3Market, IApi3MarketInterface } from "../../../api3-server-v1/interfaces/IApi3Market";
export declare class IApi3Market__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "dapiName";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "subscriptionId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "dataFeedId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sponsorWallet";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "updateParameters";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "duration";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "paymentAmount";
            readonly type: "uint256";
        }];
        readonly name: "BoughtSubscription";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "dapiName";
            readonly type: "bytes32";
        }];
        readonly name: "CanceledSubscriptions";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "hashType";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "hashValue";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "hashTimestamp";
            readonly type: "uint256";
        }];
        readonly name: "RegisteredHash";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "hashType";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "hashValue";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "hashTimestamp";
            readonly type: "uint256";
        }];
        readonly name: "SetHash";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "hashType";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "signers";
            readonly type: "address[]";
        }];
        readonly name: "SetSigners";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "dapiName";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "subscriptionId";
            readonly type: "bytes32";
        }];
        readonly name: "UpdatedCurrentSubscriptionId";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DAPI_MANAGEMENT_MERKLE_ROOT_HASH_TYPE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "DAPI_PRICING_MERKLE_ROOT_HASH_TYPE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "MAXIMUM_DAPI_UPDATE_AGE";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "SIGNED_API_URL_MERKLE_ROOT_HASH_TYPE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "airseekerRegistry";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "api3ServerV1";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dapiName";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "dataFeedId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address payable";
            readonly name: "sponsorWallet";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "updateParameters";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "duration";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "dapiManagementAndDapiPricingMerkleData";
            readonly type: "bytes";
        }];
        readonly name: "buySubscription";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "subscriptionId";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dapiName";
            readonly type: "bytes32";
        }];
        readonly name: "cancelSubscriptions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dapiName";
            readonly type: "bytes32";
        }];
        readonly name: "computeExpectedSponsorWalletBalance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "expectedSponsorWalletBalance";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dapiName";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "updateParameters";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "duration";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }];
        readonly name: "computeExpectedSponsorWalletBalanceAfterSubscriptionIsAdded";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "expectedSponsorWalletBalance";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "containsBytecode";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dapiName";
            readonly type: "bytes32";
        }];
        readonly name: "dapiNameToCurrentSubscriptionId";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "currentSubscriptionId";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dapiName";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "metadata";
            readonly type: "bytes";
        }];
        readonly name: "deployDapiProxy";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "proxyAddress";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dapiName";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "oevBeneficiary";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "metadata";
            readonly type: "bytes";
        }];
        readonly name: "deployDapiProxyWithOev";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "proxyAddress";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "getBalance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getBlockBasefee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getBlockNumber";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getBlockTimestamp";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getChainId";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dapiName";
            readonly type: "bytes32";
        }];
        readonly name: "getDapiData";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "dataFeedDetails";
            readonly type: "bytes";
        }, {
            readonly internalType: "int224";
            readonly name: "dapiValue";
            readonly type: "int224";
        }, {
            readonly internalType: "uint32";
            readonly name: "dapiTimestamp";
            readonly type: "uint32";
        }, {
            readonly internalType: "int224[]";
            readonly name: "beaconValues";
            readonly type: "int224[]";
        }, {
            readonly internalType: "uint32[]";
            readonly name: "beaconTimestamps";
            readonly type: "uint32[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "updateParameters";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "uint32[]";
            readonly name: "endTimestamps";
            readonly type: "uint32[]";
        }, {
            readonly internalType: "uint224[]";
            readonly name: "dailyPrices";
            readonly type: "uint224[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dataFeedId";
            readonly type: "bytes32";
        }];
        readonly name: "getDataFeedData";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "dataFeedDetails";
            readonly type: "bytes";
        }, {
            readonly internalType: "int224";
            readonly name: "dataFeedValue";
            readonly type: "int224";
        }, {
            readonly internalType: "uint32";
            readonly name: "dataFeedTimestamp";
            readonly type: "uint32";
        }, {
            readonly internalType: "int224[]";
            readonly name: "beaconValues";
            readonly type: "int224[]";
        }, {
            readonly internalType: "uint32[]";
            readonly name: "beaconTimestamps";
            readonly type: "uint32[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hashType";
            readonly type: "bytes32";
        }];
        readonly name: "getHashValue";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hashValue";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hashType";
            readonly type: "bytes32";
        }];
        readonly name: "hashTypeToSignersHash";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "signersHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hashType";
            readonly type: "bytes32";
        }];
        readonly name: "hashes";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hashValue";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "hashTimestamp";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "maximumSubscriptionQueueLength";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "data";
            readonly type: "bytes[]";
        }];
        readonly name: "multicall";
        readonly outputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "returndata";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "multicallData";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "bytes32";
            readonly name: "dapiName";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "dataFeedId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address payable";
            readonly name: "sponsorWallet";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "updateParameters";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "duration";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "dapiManagementAndDapiPricingMerkleData";
            readonly type: "bytes";
        }];
        readonly name: "multicallAndBuySubscription";
        readonly outputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "returndata";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "bytes32";
            readonly name: "subscriptionId";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxyFactory";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "dataFeedDetails";
            readonly type: "bytes";
        }];
        readonly name: "registerDataFeed";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dataFeedId";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hashType";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "hashValue";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "hashTimestamp";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "signatures";
            readonly type: "bytes[]";
        }];
        readonly name: "registerHash";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hashType";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "hashValue";
            readonly type: "bytes32";
        }];
        readonly name: "setHash";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hashType";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address[]";
            readonly name: "signers";
            readonly type: "address[]";
        }];
        readonly name: "setSigners";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "signatureDelegationHashType";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "subscriptionId";
            readonly type: "bytes32";
        }];
        readonly name: "subscriptionIdToUpdateParameters";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "updateParameters";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "subscriptionId";
            readonly type: "bytes32";
        }];
        readonly name: "subscriptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "updateParametersHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint32";
            readonly name: "endTimestamp";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint224";
            readonly name: "dailyPrice";
            readonly type: "uint224";
        }, {
            readonly internalType: "bytes32";
            readonly name: "nextSubscriptionId";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "data";
            readonly type: "bytes[]";
        }];
        readonly name: "tryMulticall";
        readonly outputs: readonly [{
            readonly internalType: "bool[]";
            readonly name: "successes";
            readonly type: "bool[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "returndata";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "tryMulticallData";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "bytes32";
            readonly name: "dapiName";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "dataFeedId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address payable";
            readonly name: "sponsorWallet";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "updateParameters";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "duration";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "dapiManagementAndDapiPricingMerkleData";
            readonly type: "bytes";
        }];
        readonly name: "tryMulticallAndBuySubscription";
        readonly outputs: readonly [{
            readonly internalType: "bool[]";
            readonly name: "successes";
            readonly type: "bool[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "returndata";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "bytes32";
            readonly name: "subscriptionId";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "beaconIds";
            readonly type: "bytes32[]";
        }];
        readonly name: "updateBeaconSetWithBeacons";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "beaconSetId";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "airnode";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "templateId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "timestamp";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "signature";
            readonly type: "bytes";
        }];
        readonly name: "updateBeaconWithSignedData";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "beaconId";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dapiName";
            readonly type: "bytes32";
        }];
        readonly name: "updateCurrentSubscriptionId";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dapiName";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "dataFeedId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "sponsorWallet";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "dapiManagementMerkleData";
            readonly type: "bytes";
        }];
        readonly name: "updateDapiName";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "airnode";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "signedApiUrl";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "signedApiUrlMerkleData";
            readonly type: "bytes";
        }];
        readonly name: "updateSignedApiUrl";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IApi3MarketInterface;
    static connect(address: string, runner?: ContractRunner | null): IApi3Market;
}
//# sourceMappingURL=IApi3Market__factory.d.ts.map