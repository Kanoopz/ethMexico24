import { type ContractRunner } from "ethers";
import type { IDapiProxy, IDapiProxyInterface } from "../../../../api3-server-v1/proxies/interfaces/IDapiProxy";
export declare class IDapiProxy__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "api3ServerV1";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "dapiNameHash";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "read";
        readonly outputs: readonly [{
            readonly internalType: "int224";
            readonly name: "value";
            readonly type: "int224";
        }, {
            readonly internalType: "uint32";
            readonly name: "timestamp";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IDapiProxyInterface;
    static connect(address: string, runner?: ContractRunner | null): IDapiProxy;
}
//# sourceMappingURL=IDapiProxy__factory.d.ts.map