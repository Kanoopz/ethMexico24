import { type ContractRunner } from "ethers";
import type { IHashRegistry, IHashRegistryInterface } from "../../../access/interfaces/IHashRegistry";
export declare class IHashRegistry__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "hashType";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "hashValue";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "hashTimestamp";
            readonly type: "uint256";
        }];
        readonly name: "RegisteredHash";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "hashType";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "hashValue";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "hashTimestamp";
            readonly type: "uint256";
        }];
        readonly name: "SetHash";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "hashType";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "signers";
            readonly type: "address[]";
        }];
        readonly name: "SetSigners";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hashType";
            readonly type: "bytes32";
        }];
        readonly name: "getHashValue";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hashValue";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hashType";
            readonly type: "bytes32";
        }];
        readonly name: "hashTypeToSignersHash";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "signersHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hashType";
            readonly type: "bytes32";
        }];
        readonly name: "hashes";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hashValue";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "hashTimestamp";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hashType";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "hashValue";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "hashTimestamp";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "signatures";
            readonly type: "bytes[]";
        }];
        readonly name: "registerHash";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hashType";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "hashValue";
            readonly type: "bytes32";
        }];
        readonly name: "setHash";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hashType";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address[]";
            readonly name: "signers";
            readonly type: "address[]";
        }];
        readonly name: "setSigners";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "signatureDelegationHashType";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IHashRegistryInterface;
    static connect(address: string, runner?: ContractRunner | null): IHashRegistry;
}
//# sourceMappingURL=IHashRegistry__factory.d.ts.map