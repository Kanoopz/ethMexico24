import type { BaseContract, BytesLike, FunctionFragment, Result, Interface, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../../common";
export interface DataFeedProxyWithOevInterface extends Interface {
    getFunction(nameOrSignature: "api3ServerV1" | "dataFeedId" | "oevBeneficiary" | "read"): FunctionFragment;
    encodeFunctionData(functionFragment: "api3ServerV1", values?: undefined): string;
    encodeFunctionData(functionFragment: "dataFeedId", values?: undefined): string;
    encodeFunctionData(functionFragment: "oevBeneficiary", values?: undefined): string;
    encodeFunctionData(functionFragment: "read", values?: undefined): string;
    decodeFunctionResult(functionFragment: "api3ServerV1", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dataFeedId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oevBeneficiary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "read", data: BytesLike): Result;
}
export interface DataFeedProxyWithOev extends BaseContract {
    connect(runner?: ContractRunner | null): DataFeedProxyWithOev;
    waitForDeployment(): Promise<this>;
    interface: DataFeedProxyWithOevInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    api3ServerV1: TypedContractMethod<[], [string], "view">;
    dataFeedId: TypedContractMethod<[], [string], "view">;
    oevBeneficiary: TypedContractMethod<[], [string], "view">;
    read: TypedContractMethod<[
    ], [
        [bigint, bigint] & {
            value: bigint;
            timestamp: bigint;
        }
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "api3ServerV1"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "dataFeedId"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "oevBeneficiary"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "read"): TypedContractMethod<[
    ], [
        [bigint, bigint] & {
            value: bigint;
            timestamp: bigint;
        }
    ], "view">;
    filters: {};
}
//# sourceMappingURL=DataFeedProxyWithOev.d.ts.map