import type { BaseContract, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../../common";
export interface IProxyFactoryInterface extends Interface {
    getFunction(nameOrSignature: "api3ServerV1" | "computeDapiProxyAddress" | "computeDapiProxyWithOevAddress" | "computeDataFeedProxyAddress" | "computeDataFeedProxyWithOevAddress" | "deployDapiProxy" | "deployDapiProxyWithOev" | "deployDataFeedProxy" | "deployDataFeedProxyWithOev"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "DeployedDapiProxy" | "DeployedDapiProxyWithOev" | "DeployedDataFeedProxy" | "DeployedDataFeedProxyWithOev"): EventFragment;
    encodeFunctionData(functionFragment: "api3ServerV1", values?: undefined): string;
    encodeFunctionData(functionFragment: "computeDapiProxyAddress", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "computeDapiProxyWithOevAddress", values: [BytesLike, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "computeDataFeedProxyAddress", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "computeDataFeedProxyWithOevAddress", values: [BytesLike, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "deployDapiProxy", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "deployDapiProxyWithOev", values: [BytesLike, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "deployDataFeedProxy", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "deployDataFeedProxyWithOev", values: [BytesLike, AddressLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "api3ServerV1", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "computeDapiProxyAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "computeDapiProxyWithOevAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "computeDataFeedProxyAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "computeDataFeedProxyWithOevAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployDapiProxy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployDapiProxyWithOev", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployDataFeedProxy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployDataFeedProxyWithOev", data: BytesLike): Result;
}
export declare namespace DeployedDapiProxyEvent {
    type InputTuple = [
        proxyAddress: AddressLike,
        dapiName: BytesLike,
        metadata: BytesLike
    ];
    type OutputTuple = [
        proxyAddress: string,
        dapiName: string,
        metadata: string
    ];
    interface OutputObject {
        proxyAddress: string;
        dapiName: string;
        metadata: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace DeployedDapiProxyWithOevEvent {
    type InputTuple = [
        proxyAddress: AddressLike,
        dapiName: BytesLike,
        oevBeneficiary: AddressLike,
        metadata: BytesLike
    ];
    type OutputTuple = [
        proxyAddress: string,
        dapiName: string,
        oevBeneficiary: string,
        metadata: string
    ];
    interface OutputObject {
        proxyAddress: string;
        dapiName: string;
        oevBeneficiary: string;
        metadata: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace DeployedDataFeedProxyEvent {
    type InputTuple = [
        proxyAddress: AddressLike,
        dataFeedId: BytesLike,
        metadata: BytesLike
    ];
    type OutputTuple = [
        proxyAddress: string,
        dataFeedId: string,
        metadata: string
    ];
    interface OutputObject {
        proxyAddress: string;
        dataFeedId: string;
        metadata: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace DeployedDataFeedProxyWithOevEvent {
    type InputTuple = [
        proxyAddress: AddressLike,
        dataFeedId: BytesLike,
        oevBeneficiary: AddressLike,
        metadata: BytesLike
    ];
    type OutputTuple = [
        proxyAddress: string,
        dataFeedId: string,
        oevBeneficiary: string,
        metadata: string
    ];
    interface OutputObject {
        proxyAddress: string;
        dataFeedId: string;
        oevBeneficiary: string;
        metadata: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface IProxyFactory extends BaseContract {
    connect(runner?: ContractRunner | null): IProxyFactory;
    waitForDeployment(): Promise<this>;
    interface: IProxyFactoryInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    api3ServerV1: TypedContractMethod<[], [string], "view">;
    computeDapiProxyAddress: TypedContractMethod<[
        dapiName: BytesLike,
        metadata: BytesLike
    ], [
        string
    ], "view">;
    computeDapiProxyWithOevAddress: TypedContractMethod<[
        dapiName: BytesLike,
        oevBeneficiary: AddressLike,
        metadata: BytesLike
    ], [
        string
    ], "view">;
    computeDataFeedProxyAddress: TypedContractMethod<[
        dataFeedId: BytesLike,
        metadata: BytesLike
    ], [
        string
    ], "view">;
    computeDataFeedProxyWithOevAddress: TypedContractMethod<[
        dataFeedId: BytesLike,
        oevBeneficiary: AddressLike,
        metadata: BytesLike
    ], [
        string
    ], "view">;
    deployDapiProxy: TypedContractMethod<[
        dapiName: BytesLike,
        metadata: BytesLike
    ], [
        string
    ], "nonpayable">;
    deployDapiProxyWithOev: TypedContractMethod<[
        dapiName: BytesLike,
        oevBeneficiary: AddressLike,
        metadata: BytesLike
    ], [
        string
    ], "nonpayable">;
    deployDataFeedProxy: TypedContractMethod<[
        dataFeedId: BytesLike,
        metadata: BytesLike
    ], [
        string
    ], "nonpayable">;
    deployDataFeedProxyWithOev: TypedContractMethod<[
        dataFeedId: BytesLike,
        oevBeneficiary: AddressLike,
        metadata: BytesLike
    ], [
        string
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "api3ServerV1"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "computeDapiProxyAddress"): TypedContractMethod<[
        dapiName: BytesLike,
        metadata: BytesLike
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "computeDapiProxyWithOevAddress"): TypedContractMethod<[
        dapiName: BytesLike,
        oevBeneficiary: AddressLike,
        metadata: BytesLike
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "computeDataFeedProxyAddress"): TypedContractMethod<[
        dataFeedId: BytesLike,
        metadata: BytesLike
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "computeDataFeedProxyWithOevAddress"): TypedContractMethod<[
        dataFeedId: BytesLike,
        oevBeneficiary: AddressLike,
        metadata: BytesLike
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "deployDapiProxy"): TypedContractMethod<[
        dapiName: BytesLike,
        metadata: BytesLike
    ], [
        string
    ], "nonpayable">;
    getFunction(nameOrSignature: "deployDapiProxyWithOev"): TypedContractMethod<[
        dapiName: BytesLike,
        oevBeneficiary: AddressLike,
        metadata: BytesLike
    ], [
        string
    ], "nonpayable">;
    getFunction(nameOrSignature: "deployDataFeedProxy"): TypedContractMethod<[
        dataFeedId: BytesLike,
        metadata: BytesLike
    ], [
        string
    ], "nonpayable">;
    getFunction(nameOrSignature: "deployDataFeedProxyWithOev"): TypedContractMethod<[
        dataFeedId: BytesLike,
        oevBeneficiary: AddressLike,
        metadata: BytesLike
    ], [
        string
    ], "nonpayable">;
    getEvent(key: "DeployedDapiProxy"): TypedContractEvent<DeployedDapiProxyEvent.InputTuple, DeployedDapiProxyEvent.OutputTuple, DeployedDapiProxyEvent.OutputObject>;
    getEvent(key: "DeployedDapiProxyWithOev"): TypedContractEvent<DeployedDapiProxyWithOevEvent.InputTuple, DeployedDapiProxyWithOevEvent.OutputTuple, DeployedDapiProxyWithOevEvent.OutputObject>;
    getEvent(key: "DeployedDataFeedProxy"): TypedContractEvent<DeployedDataFeedProxyEvent.InputTuple, DeployedDataFeedProxyEvent.OutputTuple, DeployedDataFeedProxyEvent.OutputObject>;
    getEvent(key: "DeployedDataFeedProxyWithOev"): TypedContractEvent<DeployedDataFeedProxyWithOevEvent.InputTuple, DeployedDataFeedProxyWithOevEvent.OutputTuple, DeployedDataFeedProxyWithOevEvent.OutputObject>;
    filters: {
        "DeployedDapiProxy(address,bytes32,bytes)": TypedContractEvent<DeployedDapiProxyEvent.InputTuple, DeployedDapiProxyEvent.OutputTuple, DeployedDapiProxyEvent.OutputObject>;
        DeployedDapiProxy: TypedContractEvent<DeployedDapiProxyEvent.InputTuple, DeployedDapiProxyEvent.OutputTuple, DeployedDapiProxyEvent.OutputObject>;
        "DeployedDapiProxyWithOev(address,bytes32,address,bytes)": TypedContractEvent<DeployedDapiProxyWithOevEvent.InputTuple, DeployedDapiProxyWithOevEvent.OutputTuple, DeployedDapiProxyWithOevEvent.OutputObject>;
        DeployedDapiProxyWithOev: TypedContractEvent<DeployedDapiProxyWithOevEvent.InputTuple, DeployedDapiProxyWithOevEvent.OutputTuple, DeployedDapiProxyWithOevEvent.OutputObject>;
        "DeployedDataFeedProxy(address,bytes32,bytes)": TypedContractEvent<DeployedDataFeedProxyEvent.InputTuple, DeployedDataFeedProxyEvent.OutputTuple, DeployedDataFeedProxyEvent.OutputObject>;
        DeployedDataFeedProxy: TypedContractEvent<DeployedDataFeedProxyEvent.InputTuple, DeployedDataFeedProxyEvent.OutputTuple, DeployedDataFeedProxyEvent.OutputObject>;
        "DeployedDataFeedProxyWithOev(address,bytes32,address,bytes)": TypedContractEvent<DeployedDataFeedProxyWithOevEvent.InputTuple, DeployedDataFeedProxyWithOevEvent.OutputTuple, DeployedDataFeedProxyWithOevEvent.OutputObject>;
        DeployedDataFeedProxyWithOev: TypedContractEvent<DeployedDataFeedProxyWithOevEvent.InputTuple, DeployedDataFeedProxyWithOevEvent.OutputTuple, DeployedDataFeedProxyWithOevEvent.OutputObject>;
    };
}
//# sourceMappingURL=IProxyFactory.d.ts.map