import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../common";
export interface IApi3MarketInterface extends Interface {
    getFunction(nameOrSignature: "DAPI_MANAGEMENT_MERKLE_ROOT_HASH_TYPE" | "DAPI_PRICING_MERKLE_ROOT_HASH_TYPE" | "MAXIMUM_DAPI_UPDATE_AGE" | "SIGNED_API_URL_MERKLE_ROOT_HASH_TYPE" | "airseekerRegistry" | "api3ServerV1" | "buySubscription" | "cancelSubscriptions" | "computeExpectedSponsorWalletBalance" | "computeExpectedSponsorWalletBalanceAfterSubscriptionIsAdded" | "containsBytecode" | "dapiNameToCurrentSubscriptionId" | "deployDapiProxy" | "deployDapiProxyWithOev" | "getBalance" | "getBlockBasefee" | "getBlockNumber" | "getBlockTimestamp" | "getChainId" | "getDapiData" | "getDataFeedData" | "getHashValue" | "hashTypeToSignersHash" | "hashes" | "maximumSubscriptionQueueLength" | "multicall" | "multicallAndBuySubscription" | "owner" | "proxyFactory" | "registerDataFeed" | "registerHash" | "renounceOwnership" | "setHash" | "setSigners" | "signatureDelegationHashType" | "subscriptionIdToUpdateParameters" | "subscriptions" | "transferOwnership" | "tryMulticall" | "tryMulticallAndBuySubscription" | "updateBeaconSetWithBeacons" | "updateBeaconWithSignedData" | "updateCurrentSubscriptionId" | "updateDapiName" | "updateSignedApiUrl"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "BoughtSubscription" | "CanceledSubscriptions" | "RegisteredHash" | "SetHash" | "SetSigners" | "UpdatedCurrentSubscriptionId"): EventFragment;
    encodeFunctionData(functionFragment: "DAPI_MANAGEMENT_MERKLE_ROOT_HASH_TYPE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DAPI_PRICING_MERKLE_ROOT_HASH_TYPE", values?: undefined): string;
    encodeFunctionData(functionFragment: "MAXIMUM_DAPI_UPDATE_AGE", values?: undefined): string;
    encodeFunctionData(functionFragment: "SIGNED_API_URL_MERKLE_ROOT_HASH_TYPE", values?: undefined): string;
    encodeFunctionData(functionFragment: "airseekerRegistry", values?: undefined): string;
    encodeFunctionData(functionFragment: "api3ServerV1", values?: undefined): string;
    encodeFunctionData(functionFragment: "buySubscription", values: [
        BytesLike,
        BytesLike,
        AddressLike,
        BytesLike,
        BigNumberish,
        BigNumberish,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "cancelSubscriptions", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "computeExpectedSponsorWalletBalance", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "computeExpectedSponsorWalletBalanceAfterSubscriptionIsAdded", values: [BytesLike, BytesLike, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "containsBytecode", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "dapiNameToCurrentSubscriptionId", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "deployDapiProxy", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "deployDapiProxyWithOev", values: [BytesLike, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "getBalance", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getBlockBasefee", values?: undefined): string;
    encodeFunctionData(functionFragment: "getBlockNumber", values?: undefined): string;
    encodeFunctionData(functionFragment: "getBlockTimestamp", values?: undefined): string;
    encodeFunctionData(functionFragment: "getChainId", values?: undefined): string;
    encodeFunctionData(functionFragment: "getDapiData", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getDataFeedData", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getHashValue", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "hashTypeToSignersHash", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "hashes", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "maximumSubscriptionQueueLength", values?: undefined): string;
    encodeFunctionData(functionFragment: "multicall", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "multicallAndBuySubscription", values: [
        BytesLike[],
        BytesLike,
        BytesLike,
        AddressLike,
        BytesLike,
        BigNumberish,
        BigNumberish,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "proxyFactory", values?: undefined): string;
    encodeFunctionData(functionFragment: "registerDataFeed", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "registerHash", values: [BytesLike, BytesLike, BigNumberish, BytesLike[]]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setHash", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "setSigners", values: [BytesLike, AddressLike[]]): string;
    encodeFunctionData(functionFragment: "signatureDelegationHashType", values?: undefined): string;
    encodeFunctionData(functionFragment: "subscriptionIdToUpdateParameters", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "subscriptions", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "tryMulticall", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "tryMulticallAndBuySubscription", values: [
        BytesLike[],
        BytesLike,
        BytesLike,
        AddressLike,
        BytesLike,
        BigNumberish,
        BigNumberish,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "updateBeaconSetWithBeacons", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "updateBeaconWithSignedData", values: [AddressLike, BytesLike, BigNumberish, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "updateCurrentSubscriptionId", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "updateDapiName", values: [BytesLike, BytesLike, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "updateSignedApiUrl", values: [AddressLike, string, BytesLike]): string;
    decodeFunctionResult(functionFragment: "DAPI_MANAGEMENT_MERKLE_ROOT_HASH_TYPE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DAPI_PRICING_MERKLE_ROOT_HASH_TYPE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MAXIMUM_DAPI_UPDATE_AGE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "SIGNED_API_URL_MERKLE_ROOT_HASH_TYPE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "airseekerRegistry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "api3ServerV1", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "buySubscription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cancelSubscriptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "computeExpectedSponsorWalletBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "computeExpectedSponsorWalletBalanceAfterSubscriptionIsAdded", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "containsBytecode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dapiNameToCurrentSubscriptionId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployDapiProxy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployDapiProxyWithOev", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBlockBasefee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBlockNumber", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBlockTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDapiData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDataFeedData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getHashValue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hashTypeToSignersHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hashes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maximumSubscriptionQueueLength", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicallAndBuySubscription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxyFactory", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerDataFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSigners", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signatureDelegationHashType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "subscriptionIdToUpdateParameters", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "subscriptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tryMulticall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tryMulticallAndBuySubscription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateBeaconSetWithBeacons", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateBeaconWithSignedData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateCurrentSubscriptionId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateDapiName", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateSignedApiUrl", data: BytesLike): Result;
}
export declare namespace BoughtSubscriptionEvent {
    type InputTuple = [
        dapiName: BytesLike,
        subscriptionId: BytesLike,
        dataFeedId: BytesLike,
        sponsorWallet: AddressLike,
        updateParameters: BytesLike,
        duration: BigNumberish,
        price: BigNumberish,
        paymentAmount: BigNumberish
    ];
    type OutputTuple = [
        dapiName: string,
        subscriptionId: string,
        dataFeedId: string,
        sponsorWallet: string,
        updateParameters: string,
        duration: bigint,
        price: bigint,
        paymentAmount: bigint
    ];
    interface OutputObject {
        dapiName: string;
        subscriptionId: string;
        dataFeedId: string;
        sponsorWallet: string;
        updateParameters: string;
        duration: bigint;
        price: bigint;
        paymentAmount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace CanceledSubscriptionsEvent {
    type InputTuple = [dapiName: BytesLike];
    type OutputTuple = [dapiName: string];
    interface OutputObject {
        dapiName: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RegisteredHashEvent {
    type InputTuple = [
        hashType: BytesLike,
        hashValue: BytesLike,
        hashTimestamp: BigNumberish
    ];
    type OutputTuple = [
        hashType: string,
        hashValue: string,
        hashTimestamp: bigint
    ];
    interface OutputObject {
        hashType: string;
        hashValue: string;
        hashTimestamp: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace SetHashEvent {
    type InputTuple = [
        hashType: BytesLike,
        hashValue: BytesLike,
        hashTimestamp: BigNumberish
    ];
    type OutputTuple = [
        hashType: string,
        hashValue: string,
        hashTimestamp: bigint
    ];
    interface OutputObject {
        hashType: string;
        hashValue: string;
        hashTimestamp: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace SetSignersEvent {
    type InputTuple = [hashType: BytesLike, signers: AddressLike[]];
    type OutputTuple = [hashType: string, signers: string[]];
    interface OutputObject {
        hashType: string;
        signers: string[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdatedCurrentSubscriptionIdEvent {
    type InputTuple = [dapiName: BytesLike, subscriptionId: BytesLike];
    type OutputTuple = [dapiName: string, subscriptionId: string];
    interface OutputObject {
        dapiName: string;
        subscriptionId: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface IApi3Market extends BaseContract {
    connect(runner?: ContractRunner | null): IApi3Market;
    waitForDeployment(): Promise<this>;
    interface: IApi3MarketInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    DAPI_MANAGEMENT_MERKLE_ROOT_HASH_TYPE: TypedContractMethod<[
    ], [
        string
    ], "view">;
    DAPI_PRICING_MERKLE_ROOT_HASH_TYPE: TypedContractMethod<[], [string], "view">;
    MAXIMUM_DAPI_UPDATE_AGE: TypedContractMethod<[], [bigint], "view">;
    SIGNED_API_URL_MERKLE_ROOT_HASH_TYPE: TypedContractMethod<[
    ], [
        string
    ], "view">;
    airseekerRegistry: TypedContractMethod<[], [string], "view">;
    api3ServerV1: TypedContractMethod<[], [string], "view">;
    buySubscription: TypedContractMethod<[
        dapiName: BytesLike,
        dataFeedId: BytesLike,
        sponsorWallet: AddressLike,
        updateParameters: BytesLike,
        duration: BigNumberish,
        price: BigNumberish,
        dapiManagementAndDapiPricingMerkleData: BytesLike
    ], [
        string
    ], "payable">;
    cancelSubscriptions: TypedContractMethod<[
        dapiName: BytesLike
    ], [
        void
    ], "nonpayable">;
    computeExpectedSponsorWalletBalance: TypedContractMethod<[
        dapiName: BytesLike
    ], [
        bigint
    ], "view">;
    computeExpectedSponsorWalletBalanceAfterSubscriptionIsAdded: TypedContractMethod<[
        dapiName: BytesLike,
        updateParameters: BytesLike,
        duration: BigNumberish,
        price: BigNumberish
    ], [
        bigint
    ], "view">;
    containsBytecode: TypedContractMethod<[
        account: AddressLike
    ], [
        boolean
    ], "view">;
    dapiNameToCurrentSubscriptionId: TypedContractMethod<[
        dapiName: BytesLike
    ], [
        string
    ], "view">;
    deployDapiProxy: TypedContractMethod<[
        dapiName: BytesLike,
        metadata: BytesLike
    ], [
        string
    ], "nonpayable">;
    deployDapiProxyWithOev: TypedContractMethod<[
        dapiName: BytesLike,
        oevBeneficiary: AddressLike,
        metadata: BytesLike
    ], [
        string
    ], "nonpayable">;
    getBalance: TypedContractMethod<[account: AddressLike], [bigint], "view">;
    getBlockBasefee: TypedContractMethod<[], [bigint], "view">;
    getBlockNumber: TypedContractMethod<[], [bigint], "view">;
    getBlockTimestamp: TypedContractMethod<[], [bigint], "view">;
    getChainId: TypedContractMethod<[], [bigint], "view">;
    getDapiData: TypedContractMethod<[
        dapiName: BytesLike
    ], [
        [
            string,
            bigint,
            bigint,
            bigint[],
            bigint[],
            string[],
            bigint[],
            bigint[]
        ] & {
            dataFeedDetails: string;
            dapiValue: bigint;
            dapiTimestamp: bigint;
            beaconValues: bigint[];
            beaconTimestamps: bigint[];
            updateParameters: string[];
            endTimestamps: bigint[];
            dailyPrices: bigint[];
        }
    ], "view">;
    getDataFeedData: TypedContractMethod<[
        dataFeedId: BytesLike
    ], [
        [
            string,
            bigint,
            bigint,
            bigint[],
            bigint[]
        ] & {
            dataFeedDetails: string;
            dataFeedValue: bigint;
            dataFeedTimestamp: bigint;
            beaconValues: bigint[];
            beaconTimestamps: bigint[];
        }
    ], "view">;
    getHashValue: TypedContractMethod<[hashType: BytesLike], [string], "view">;
    hashTypeToSignersHash: TypedContractMethod<[
        hashType: BytesLike
    ], [
        string
    ], "view">;
    hashes: TypedContractMethod<[
        hashType: BytesLike
    ], [
        [string, bigint] & {
            hashValue: string;
            hashTimestamp: bigint;
        }
    ], "view">;
    maximumSubscriptionQueueLength: TypedContractMethod<[], [bigint], "view">;
    multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
    multicallAndBuySubscription: TypedContractMethod<[
        multicallData: BytesLike[],
        dapiName: BytesLike,
        dataFeedId: BytesLike,
        sponsorWallet: AddressLike,
        updateParameters: BytesLike,
        duration: BigNumberish,
        price: BigNumberish,
        dapiManagementAndDapiPricingMerkleData: BytesLike
    ], [
        [string[], string] & {
            returndata: string[];
            subscriptionId: string;
        }
    ], "payable">;
    owner: TypedContractMethod<[], [string], "view">;
    proxyFactory: TypedContractMethod<[], [string], "view">;
    registerDataFeed: TypedContractMethod<[
        dataFeedDetails: BytesLike
    ], [
        string
    ], "nonpayable">;
    registerHash: TypedContractMethod<[
        hashType: BytesLike,
        hashValue: BytesLike,
        hashTimestamp: BigNumberish,
        signatures: BytesLike[]
    ], [
        void
    ], "nonpayable">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    setHash: TypedContractMethod<[
        hashType: BytesLike,
        hashValue: BytesLike
    ], [
        void
    ], "nonpayable">;
    setSigners: TypedContractMethod<[
        hashType: BytesLike,
        signers: AddressLike[]
    ], [
        void
    ], "nonpayable">;
    signatureDelegationHashType: TypedContractMethod<[], [string], "view">;
    subscriptionIdToUpdateParameters: TypedContractMethod<[
        subscriptionId: BytesLike
    ], [
        string
    ], "view">;
    subscriptions: TypedContractMethod<[
        subscriptionId: BytesLike
    ], [
        [
            string,
            bigint,
            bigint,
            string
        ] & {
            updateParametersHash: string;
            endTimestamp: bigint;
            dailyPrice: bigint;
            nextSubscriptionId: string;
        }
    ], "view">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    tryMulticall: TypedContractMethod<[
        data: BytesLike[]
    ], [
        [boolean[], string[]] & {
            successes: boolean[];
            returndata: string[];
        }
    ], "nonpayable">;
    tryMulticallAndBuySubscription: TypedContractMethod<[
        tryMulticallData: BytesLike[],
        dapiName: BytesLike,
        dataFeedId: BytesLike,
        sponsorWallet: AddressLike,
        updateParameters: BytesLike,
        duration: BigNumberish,
        price: BigNumberish,
        dapiManagementAndDapiPricingMerkleData: BytesLike
    ], [
        [
            boolean[],
            string[],
            string
        ] & {
            successes: boolean[];
            returndata: string[];
            subscriptionId: string;
        }
    ], "payable">;
    updateBeaconSetWithBeacons: TypedContractMethod<[
        beaconIds: BytesLike[]
    ], [
        string
    ], "nonpayable">;
    updateBeaconWithSignedData: TypedContractMethod<[
        airnode: AddressLike,
        templateId: BytesLike,
        timestamp: BigNumberish,
        data: BytesLike,
        signature: BytesLike
    ], [
        string
    ], "nonpayable">;
    updateCurrentSubscriptionId: TypedContractMethod<[
        dapiName: BytesLike
    ], [
        void
    ], "nonpayable">;
    updateDapiName: TypedContractMethod<[
        dapiName: BytesLike,
        dataFeedId: BytesLike,
        sponsorWallet: AddressLike,
        dapiManagementMerkleData: BytesLike
    ], [
        void
    ], "nonpayable">;
    updateSignedApiUrl: TypedContractMethod<[
        airnode: AddressLike,
        signedApiUrl: string,
        signedApiUrlMerkleData: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "DAPI_MANAGEMENT_MERKLE_ROOT_HASH_TYPE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "DAPI_PRICING_MERKLE_ROOT_HASH_TYPE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "MAXIMUM_DAPI_UPDATE_AGE"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "SIGNED_API_URL_MERKLE_ROOT_HASH_TYPE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "airseekerRegistry"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "api3ServerV1"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "buySubscription"): TypedContractMethod<[
        dapiName: BytesLike,
        dataFeedId: BytesLike,
        sponsorWallet: AddressLike,
        updateParameters: BytesLike,
        duration: BigNumberish,
        price: BigNumberish,
        dapiManagementAndDapiPricingMerkleData: BytesLike
    ], [
        string
    ], "payable">;
    getFunction(nameOrSignature: "cancelSubscriptions"): TypedContractMethod<[dapiName: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "computeExpectedSponsorWalletBalance"): TypedContractMethod<[dapiName: BytesLike], [bigint], "view">;
    getFunction(nameOrSignature: "computeExpectedSponsorWalletBalanceAfterSubscriptionIsAdded"): TypedContractMethod<[
        dapiName: BytesLike,
        updateParameters: BytesLike,
        duration: BigNumberish,
        price: BigNumberish
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "containsBytecode"): TypedContractMethod<[account: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "dapiNameToCurrentSubscriptionId"): TypedContractMethod<[dapiName: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "deployDapiProxy"): TypedContractMethod<[
        dapiName: BytesLike,
        metadata: BytesLike
    ], [
        string
    ], "nonpayable">;
    getFunction(nameOrSignature: "deployDapiProxyWithOev"): TypedContractMethod<[
        dapiName: BytesLike,
        oevBeneficiary: AddressLike,
        metadata: BytesLike
    ], [
        string
    ], "nonpayable">;
    getFunction(nameOrSignature: "getBalance"): TypedContractMethod<[account: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "getBlockBasefee"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getBlockNumber"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getBlockTimestamp"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getChainId"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getDapiData"): TypedContractMethod<[
        dapiName: BytesLike
    ], [
        [
            string,
            bigint,
            bigint,
            bigint[],
            bigint[],
            string[],
            bigint[],
            bigint[]
        ] & {
            dataFeedDetails: string;
            dapiValue: bigint;
            dapiTimestamp: bigint;
            beaconValues: bigint[];
            beaconTimestamps: bigint[];
            updateParameters: string[];
            endTimestamps: bigint[];
            dailyPrices: bigint[];
        }
    ], "view">;
    getFunction(nameOrSignature: "getDataFeedData"): TypedContractMethod<[
        dataFeedId: BytesLike
    ], [
        [
            string,
            bigint,
            bigint,
            bigint[],
            bigint[]
        ] & {
            dataFeedDetails: string;
            dataFeedValue: bigint;
            dataFeedTimestamp: bigint;
            beaconValues: bigint[];
            beaconTimestamps: bigint[];
        }
    ], "view">;
    getFunction(nameOrSignature: "getHashValue"): TypedContractMethod<[hashType: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "hashTypeToSignersHash"): TypedContractMethod<[hashType: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "hashes"): TypedContractMethod<[
        hashType: BytesLike
    ], [
        [string, bigint] & {
            hashValue: string;
            hashTimestamp: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "maximumSubscriptionQueueLength"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "multicall"): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
    getFunction(nameOrSignature: "multicallAndBuySubscription"): TypedContractMethod<[
        multicallData: BytesLike[],
        dapiName: BytesLike,
        dataFeedId: BytesLike,
        sponsorWallet: AddressLike,
        updateParameters: BytesLike,
        duration: BigNumberish,
        price: BigNumberish,
        dapiManagementAndDapiPricingMerkleData: BytesLike
    ], [
        [string[], string] & {
            returndata: string[];
            subscriptionId: string;
        }
    ], "payable">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "proxyFactory"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "registerDataFeed"): TypedContractMethod<[dataFeedDetails: BytesLike], [string], "nonpayable">;
    getFunction(nameOrSignature: "registerHash"): TypedContractMethod<[
        hashType: BytesLike,
        hashValue: BytesLike,
        hashTimestamp: BigNumberish,
        signatures: BytesLike[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "setHash"): TypedContractMethod<[
        hashType: BytesLike,
        hashValue: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setSigners"): TypedContractMethod<[
        hashType: BytesLike,
        signers: AddressLike[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "signatureDelegationHashType"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "subscriptionIdToUpdateParameters"): TypedContractMethod<[subscriptionId: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "subscriptions"): TypedContractMethod<[
        subscriptionId: BytesLike
    ], [
        [
            string,
            bigint,
            bigint,
            string
        ] & {
            updateParametersHash: string;
            endTimestamp: bigint;
            dailyPrice: bigint;
            nextSubscriptionId: string;
        }
    ], "view">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "tryMulticall"): TypedContractMethod<[
        data: BytesLike[]
    ], [
        [boolean[], string[]] & {
            successes: boolean[];
            returndata: string[];
        }
    ], "nonpayable">;
    getFunction(nameOrSignature: "tryMulticallAndBuySubscription"): TypedContractMethod<[
        tryMulticallData: BytesLike[],
        dapiName: BytesLike,
        dataFeedId: BytesLike,
        sponsorWallet: AddressLike,
        updateParameters: BytesLike,
        duration: BigNumberish,
        price: BigNumberish,
        dapiManagementAndDapiPricingMerkleData: BytesLike
    ], [
        [
            boolean[],
            string[],
            string
        ] & {
            successes: boolean[];
            returndata: string[];
            subscriptionId: string;
        }
    ], "payable">;
    getFunction(nameOrSignature: "updateBeaconSetWithBeacons"): TypedContractMethod<[beaconIds: BytesLike[]], [string], "nonpayable">;
    getFunction(nameOrSignature: "updateBeaconWithSignedData"): TypedContractMethod<[
        airnode: AddressLike,
        templateId: BytesLike,
        timestamp: BigNumberish,
        data: BytesLike,
        signature: BytesLike
    ], [
        string
    ], "nonpayable">;
    getFunction(nameOrSignature: "updateCurrentSubscriptionId"): TypedContractMethod<[dapiName: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateDapiName"): TypedContractMethod<[
        dapiName: BytesLike,
        dataFeedId: BytesLike,
        sponsorWallet: AddressLike,
        dapiManagementMerkleData: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "updateSignedApiUrl"): TypedContractMethod<[
        airnode: AddressLike,
        signedApiUrl: string,
        signedApiUrlMerkleData: BytesLike
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "BoughtSubscription"): TypedContractEvent<BoughtSubscriptionEvent.InputTuple, BoughtSubscriptionEvent.OutputTuple, BoughtSubscriptionEvent.OutputObject>;
    getEvent(key: "CanceledSubscriptions"): TypedContractEvent<CanceledSubscriptionsEvent.InputTuple, CanceledSubscriptionsEvent.OutputTuple, CanceledSubscriptionsEvent.OutputObject>;
    getEvent(key: "RegisteredHash"): TypedContractEvent<RegisteredHashEvent.InputTuple, RegisteredHashEvent.OutputTuple, RegisteredHashEvent.OutputObject>;
    getEvent(key: "SetHash"): TypedContractEvent<SetHashEvent.InputTuple, SetHashEvent.OutputTuple, SetHashEvent.OutputObject>;
    getEvent(key: "SetSigners"): TypedContractEvent<SetSignersEvent.InputTuple, SetSignersEvent.OutputTuple, SetSignersEvent.OutputObject>;
    getEvent(key: "UpdatedCurrentSubscriptionId"): TypedContractEvent<UpdatedCurrentSubscriptionIdEvent.InputTuple, UpdatedCurrentSubscriptionIdEvent.OutputTuple, UpdatedCurrentSubscriptionIdEvent.OutputObject>;
    filters: {
        "BoughtSubscription(bytes32,bytes32,bytes32,address,bytes,uint256,uint256,uint256)": TypedContractEvent<BoughtSubscriptionEvent.InputTuple, BoughtSubscriptionEvent.OutputTuple, BoughtSubscriptionEvent.OutputObject>;
        BoughtSubscription: TypedContractEvent<BoughtSubscriptionEvent.InputTuple, BoughtSubscriptionEvent.OutputTuple, BoughtSubscriptionEvent.OutputObject>;
        "CanceledSubscriptions(bytes32)": TypedContractEvent<CanceledSubscriptionsEvent.InputTuple, CanceledSubscriptionsEvent.OutputTuple, CanceledSubscriptionsEvent.OutputObject>;
        CanceledSubscriptions: TypedContractEvent<CanceledSubscriptionsEvent.InputTuple, CanceledSubscriptionsEvent.OutputTuple, CanceledSubscriptionsEvent.OutputObject>;
        "RegisteredHash(bytes32,bytes32,uint256)": TypedContractEvent<RegisteredHashEvent.InputTuple, RegisteredHashEvent.OutputTuple, RegisteredHashEvent.OutputObject>;
        RegisteredHash: TypedContractEvent<RegisteredHashEvent.InputTuple, RegisteredHashEvent.OutputTuple, RegisteredHashEvent.OutputObject>;
        "SetHash(bytes32,bytes32,uint256)": TypedContractEvent<SetHashEvent.InputTuple, SetHashEvent.OutputTuple, SetHashEvent.OutputObject>;
        SetHash: TypedContractEvent<SetHashEvent.InputTuple, SetHashEvent.OutputTuple, SetHashEvent.OutputObject>;
        "SetSigners(bytes32,address[])": TypedContractEvent<SetSignersEvent.InputTuple, SetSignersEvent.OutputTuple, SetSignersEvent.OutputObject>;
        SetSigners: TypedContractEvent<SetSignersEvent.InputTuple, SetSignersEvent.OutputTuple, SetSignersEvent.OutputObject>;
        "UpdatedCurrentSubscriptionId(bytes32,bytes32)": TypedContractEvent<UpdatedCurrentSubscriptionIdEvent.InputTuple, UpdatedCurrentSubscriptionIdEvent.OutputTuple, UpdatedCurrentSubscriptionIdEvent.OutputObject>;
        UpdatedCurrentSubscriptionId: TypedContractEvent<UpdatedCurrentSubscriptionIdEvent.InputTuple, UpdatedCurrentSubscriptionIdEvent.OutputTuple, UpdatedCurrentSubscriptionIdEvent.OutputObject>;
    };
}
//# sourceMappingURL=IApi3Market.d.ts.map