import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../common";
export interface IAirseekerRegistryInterface extends Interface {
    getFunction(nameOrSignature: "MAXIMUM_BEACON_COUNT_IN_SET" | "MAXIMUM_SIGNED_API_URL_LENGTH" | "MAXIMUM_UPDATE_PARAMETERS_LENGTH" | "activeDapiNameCount" | "activeDataFeed" | "activeDataFeedCount" | "activeDataFeedIdCount" | "airnodeToSignedApiUrl" | "api3ServerV1" | "containsBytecode" | "dapiNameToUpdateParameters" | "dataFeedIdToDetails" | "dataFeedIdToUpdateParameters" | "dataFeedIsRegistered" | "getBalance" | "getBlockBasefee" | "getBlockNumber" | "getBlockTimestamp" | "getChainId" | "multicall" | "owner" | "registerDataFeed" | "renounceOwnership" | "setDapiNameToBeActivated" | "setDapiNameToBeDeactivated" | "setDapiNameUpdateParameters" | "setDataFeedIdToBeActivated" | "setDataFeedIdToBeDeactivated" | "setDataFeedIdUpdateParameters" | "setSignedApiUrl" | "transferOwnership" | "tryMulticall"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "ActivatedDapiName" | "ActivatedDataFeedId" | "DeactivatedDapiName" | "DeactivatedDataFeedId" | "RegisteredDataFeed" | "UpdatedDapiNameUpdateParameters" | "UpdatedDataFeedIdUpdateParameters" | "UpdatedSignedApiUrl"): EventFragment;
    encodeFunctionData(functionFragment: "MAXIMUM_BEACON_COUNT_IN_SET", values?: undefined): string;
    encodeFunctionData(functionFragment: "MAXIMUM_SIGNED_API_URL_LENGTH", values?: undefined): string;
    encodeFunctionData(functionFragment: "MAXIMUM_UPDATE_PARAMETERS_LENGTH", values?: undefined): string;
    encodeFunctionData(functionFragment: "activeDapiNameCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "activeDataFeed", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "activeDataFeedCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "activeDataFeedIdCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "airnodeToSignedApiUrl", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "api3ServerV1", values?: undefined): string;
    encodeFunctionData(functionFragment: "containsBytecode", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "dapiNameToUpdateParameters", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "dataFeedIdToDetails", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "dataFeedIdToUpdateParameters", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "dataFeedIsRegistered", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getBalance", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getBlockBasefee", values?: undefined): string;
    encodeFunctionData(functionFragment: "getBlockNumber", values?: undefined): string;
    encodeFunctionData(functionFragment: "getBlockTimestamp", values?: undefined): string;
    encodeFunctionData(functionFragment: "getChainId", values?: undefined): string;
    encodeFunctionData(functionFragment: "multicall", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "registerDataFeed", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDapiNameToBeActivated", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "setDapiNameToBeDeactivated", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "setDapiNameUpdateParameters", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "setDataFeedIdToBeActivated", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "setDataFeedIdToBeDeactivated", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "setDataFeedIdUpdateParameters", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "setSignedApiUrl", values: [AddressLike, string]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "tryMulticall", values: [BytesLike[]]): string;
    decodeFunctionResult(functionFragment: "MAXIMUM_BEACON_COUNT_IN_SET", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MAXIMUM_SIGNED_API_URL_LENGTH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MAXIMUM_UPDATE_PARAMETERS_LENGTH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "activeDapiNameCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "activeDataFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "activeDataFeedCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "activeDataFeedIdCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "airnodeToSignedApiUrl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "api3ServerV1", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "containsBytecode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dapiNameToUpdateParameters", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dataFeedIdToDetails", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dataFeedIdToUpdateParameters", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dataFeedIsRegistered", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBlockBasefee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBlockNumber", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBlockTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerDataFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDapiNameToBeActivated", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDapiNameToBeDeactivated", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDapiNameUpdateParameters", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDataFeedIdToBeActivated", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDataFeedIdToBeDeactivated", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDataFeedIdUpdateParameters", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSignedApiUrl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tryMulticall", data: BytesLike): Result;
}
export declare namespace ActivatedDapiNameEvent {
    type InputTuple = [dapiName: BytesLike];
    type OutputTuple = [dapiName: string];
    interface OutputObject {
        dapiName: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace ActivatedDataFeedIdEvent {
    type InputTuple = [dataFeedId: BytesLike];
    type OutputTuple = [dataFeedId: string];
    interface OutputObject {
        dataFeedId: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace DeactivatedDapiNameEvent {
    type InputTuple = [dapiName: BytesLike];
    type OutputTuple = [dapiName: string];
    interface OutputObject {
        dapiName: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace DeactivatedDataFeedIdEvent {
    type InputTuple = [dataFeedId: BytesLike];
    type OutputTuple = [dataFeedId: string];
    interface OutputObject {
        dataFeedId: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RegisteredDataFeedEvent {
    type InputTuple = [dataFeedId: BytesLike, dataFeedDetails: BytesLike];
    type OutputTuple = [dataFeedId: string, dataFeedDetails: string];
    interface OutputObject {
        dataFeedId: string;
        dataFeedDetails: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdatedDapiNameUpdateParametersEvent {
    type InputTuple = [dapiName: BytesLike, updateParameters: BytesLike];
    type OutputTuple = [dapiName: string, updateParameters: string];
    interface OutputObject {
        dapiName: string;
        updateParameters: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdatedDataFeedIdUpdateParametersEvent {
    type InputTuple = [dataFeedId: BytesLike, updateParameters: BytesLike];
    type OutputTuple = [dataFeedId: string, updateParameters: string];
    interface OutputObject {
        dataFeedId: string;
        updateParameters: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdatedSignedApiUrlEvent {
    type InputTuple = [airnode: AddressLike, signedApiUrl: string];
    type OutputTuple = [airnode: string, signedApiUrl: string];
    interface OutputObject {
        airnode: string;
        signedApiUrl: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface IAirseekerRegistry extends BaseContract {
    connect(runner?: ContractRunner | null): IAirseekerRegistry;
    waitForDeployment(): Promise<this>;
    interface: IAirseekerRegistryInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    MAXIMUM_BEACON_COUNT_IN_SET: TypedContractMethod<[], [bigint], "view">;
    MAXIMUM_SIGNED_API_URL_LENGTH: TypedContractMethod<[], [bigint], "view">;
    MAXIMUM_UPDATE_PARAMETERS_LENGTH: TypedContractMethod<[], [bigint], "view">;
    activeDapiNameCount: TypedContractMethod<[], [bigint], "view">;
    activeDataFeed: TypedContractMethod<[
        index: BigNumberish
    ], [
        [
            string,
            string,
            string,
            bigint,
            bigint,
            bigint[],
            bigint[],
            string,
            string[]
        ] & {
            dataFeedId: string;
            dapiName: string;
            dataFeedDetails: string;
            dataFeedValue: bigint;
            dataFeedTimestamp: bigint;
            beaconValues: bigint[];
            beaconTimestamps: bigint[];
            updateParameters: string;
            signedApiUrls: string[];
        }
    ], "view">;
    activeDataFeedCount: TypedContractMethod<[], [bigint], "view">;
    activeDataFeedIdCount: TypedContractMethod<[], [bigint], "view">;
    airnodeToSignedApiUrl: TypedContractMethod<[
        airnode: AddressLike
    ], [
        string
    ], "view">;
    api3ServerV1: TypedContractMethod<[], [string], "view">;
    containsBytecode: TypedContractMethod<[
        account: AddressLike
    ], [
        boolean
    ], "view">;
    dapiNameToUpdateParameters: TypedContractMethod<[
        dapiName: BytesLike
    ], [
        string
    ], "view">;
    dataFeedIdToDetails: TypedContractMethod<[
        dataFeedId: BytesLike
    ], [
        string
    ], "view">;
    dataFeedIdToUpdateParameters: TypedContractMethod<[
        dataFeedId: BytesLike
    ], [
        string
    ], "view">;
    dataFeedIsRegistered: TypedContractMethod<[
        dataFeedId: BytesLike
    ], [
        boolean
    ], "view">;
    getBalance: TypedContractMethod<[account: AddressLike], [bigint], "view">;
    getBlockBasefee: TypedContractMethod<[], [bigint], "view">;
    getBlockNumber: TypedContractMethod<[], [bigint], "view">;
    getBlockTimestamp: TypedContractMethod<[], [bigint], "view">;
    getChainId: TypedContractMethod<[], [bigint], "view">;
    multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
    owner: TypedContractMethod<[], [string], "view">;
    registerDataFeed: TypedContractMethod<[
        dataFeedDetails: BytesLike
    ], [
        string
    ], "nonpayable">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    setDapiNameToBeActivated: TypedContractMethod<[
        dapiName: BytesLike
    ], [
        void
    ], "nonpayable">;
    setDapiNameToBeDeactivated: TypedContractMethod<[
        dapiName: BytesLike
    ], [
        void
    ], "nonpayable">;
    setDapiNameUpdateParameters: TypedContractMethod<[
        dapiName: BytesLike,
        updateParameters: BytesLike
    ], [
        void
    ], "nonpayable">;
    setDataFeedIdToBeActivated: TypedContractMethod<[
        dataFeedId: BytesLike
    ], [
        void
    ], "nonpayable">;
    setDataFeedIdToBeDeactivated: TypedContractMethod<[
        dataFeedId: BytesLike
    ], [
        void
    ], "nonpayable">;
    setDataFeedIdUpdateParameters: TypedContractMethod<[
        dataFeedId: BytesLike,
        updateParameters: BytesLike
    ], [
        void
    ], "nonpayable">;
    setSignedApiUrl: TypedContractMethod<[
        airnode: AddressLike,
        signedApiUrl: string
    ], [
        void
    ], "nonpayable">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    tryMulticall: TypedContractMethod<[
        data: BytesLike[]
    ], [
        [boolean[], string[]] & {
            successes: boolean[];
            returndata: string[];
        }
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "MAXIMUM_BEACON_COUNT_IN_SET"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "MAXIMUM_SIGNED_API_URL_LENGTH"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "MAXIMUM_UPDATE_PARAMETERS_LENGTH"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "activeDapiNameCount"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "activeDataFeed"): TypedContractMethod<[
        index: BigNumberish
    ], [
        [
            string,
            string,
            string,
            bigint,
            bigint,
            bigint[],
            bigint[],
            string,
            string[]
        ] & {
            dataFeedId: string;
            dapiName: string;
            dataFeedDetails: string;
            dataFeedValue: bigint;
            dataFeedTimestamp: bigint;
            beaconValues: bigint[];
            beaconTimestamps: bigint[];
            updateParameters: string;
            signedApiUrls: string[];
        }
    ], "view">;
    getFunction(nameOrSignature: "activeDataFeedCount"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "activeDataFeedIdCount"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "airnodeToSignedApiUrl"): TypedContractMethod<[airnode: AddressLike], [string], "view">;
    getFunction(nameOrSignature: "api3ServerV1"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "containsBytecode"): TypedContractMethod<[account: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "dapiNameToUpdateParameters"): TypedContractMethod<[dapiName: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "dataFeedIdToDetails"): TypedContractMethod<[dataFeedId: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "dataFeedIdToUpdateParameters"): TypedContractMethod<[dataFeedId: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "dataFeedIsRegistered"): TypedContractMethod<[dataFeedId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "getBalance"): TypedContractMethod<[account: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "getBlockBasefee"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getBlockNumber"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getBlockTimestamp"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getChainId"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "multicall"): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "registerDataFeed"): TypedContractMethod<[dataFeedDetails: BytesLike], [string], "nonpayable">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "setDapiNameToBeActivated"): TypedContractMethod<[dapiName: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setDapiNameToBeDeactivated"): TypedContractMethod<[dapiName: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setDapiNameUpdateParameters"): TypedContractMethod<[
        dapiName: BytesLike,
        updateParameters: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDataFeedIdToBeActivated"): TypedContractMethod<[dataFeedId: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setDataFeedIdToBeDeactivated"): TypedContractMethod<[dataFeedId: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setDataFeedIdUpdateParameters"): TypedContractMethod<[
        dataFeedId: BytesLike,
        updateParameters: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setSignedApiUrl"): TypedContractMethod<[
        airnode: AddressLike,
        signedApiUrl: string
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "tryMulticall"): TypedContractMethod<[
        data: BytesLike[]
    ], [
        [boolean[], string[]] & {
            successes: boolean[];
            returndata: string[];
        }
    ], "nonpayable">;
    getEvent(key: "ActivatedDapiName"): TypedContractEvent<ActivatedDapiNameEvent.InputTuple, ActivatedDapiNameEvent.OutputTuple, ActivatedDapiNameEvent.OutputObject>;
    getEvent(key: "ActivatedDataFeedId"): TypedContractEvent<ActivatedDataFeedIdEvent.InputTuple, ActivatedDataFeedIdEvent.OutputTuple, ActivatedDataFeedIdEvent.OutputObject>;
    getEvent(key: "DeactivatedDapiName"): TypedContractEvent<DeactivatedDapiNameEvent.InputTuple, DeactivatedDapiNameEvent.OutputTuple, DeactivatedDapiNameEvent.OutputObject>;
    getEvent(key: "DeactivatedDataFeedId"): TypedContractEvent<DeactivatedDataFeedIdEvent.InputTuple, DeactivatedDataFeedIdEvent.OutputTuple, DeactivatedDataFeedIdEvent.OutputObject>;
    getEvent(key: "RegisteredDataFeed"): TypedContractEvent<RegisteredDataFeedEvent.InputTuple, RegisteredDataFeedEvent.OutputTuple, RegisteredDataFeedEvent.OutputObject>;
    getEvent(key: "UpdatedDapiNameUpdateParameters"): TypedContractEvent<UpdatedDapiNameUpdateParametersEvent.InputTuple, UpdatedDapiNameUpdateParametersEvent.OutputTuple, UpdatedDapiNameUpdateParametersEvent.OutputObject>;
    getEvent(key: "UpdatedDataFeedIdUpdateParameters"): TypedContractEvent<UpdatedDataFeedIdUpdateParametersEvent.InputTuple, UpdatedDataFeedIdUpdateParametersEvent.OutputTuple, UpdatedDataFeedIdUpdateParametersEvent.OutputObject>;
    getEvent(key: "UpdatedSignedApiUrl"): TypedContractEvent<UpdatedSignedApiUrlEvent.InputTuple, UpdatedSignedApiUrlEvent.OutputTuple, UpdatedSignedApiUrlEvent.OutputObject>;
    filters: {
        "ActivatedDapiName(bytes32)": TypedContractEvent<ActivatedDapiNameEvent.InputTuple, ActivatedDapiNameEvent.OutputTuple, ActivatedDapiNameEvent.OutputObject>;
        ActivatedDapiName: TypedContractEvent<ActivatedDapiNameEvent.InputTuple, ActivatedDapiNameEvent.OutputTuple, ActivatedDapiNameEvent.OutputObject>;
        "ActivatedDataFeedId(bytes32)": TypedContractEvent<ActivatedDataFeedIdEvent.InputTuple, ActivatedDataFeedIdEvent.OutputTuple, ActivatedDataFeedIdEvent.OutputObject>;
        ActivatedDataFeedId: TypedContractEvent<ActivatedDataFeedIdEvent.InputTuple, ActivatedDataFeedIdEvent.OutputTuple, ActivatedDataFeedIdEvent.OutputObject>;
        "DeactivatedDapiName(bytes32)": TypedContractEvent<DeactivatedDapiNameEvent.InputTuple, DeactivatedDapiNameEvent.OutputTuple, DeactivatedDapiNameEvent.OutputObject>;
        DeactivatedDapiName: TypedContractEvent<DeactivatedDapiNameEvent.InputTuple, DeactivatedDapiNameEvent.OutputTuple, DeactivatedDapiNameEvent.OutputObject>;
        "DeactivatedDataFeedId(bytes32)": TypedContractEvent<DeactivatedDataFeedIdEvent.InputTuple, DeactivatedDataFeedIdEvent.OutputTuple, DeactivatedDataFeedIdEvent.OutputObject>;
        DeactivatedDataFeedId: TypedContractEvent<DeactivatedDataFeedIdEvent.InputTuple, DeactivatedDataFeedIdEvent.OutputTuple, DeactivatedDataFeedIdEvent.OutputObject>;
        "RegisteredDataFeed(bytes32,bytes)": TypedContractEvent<RegisteredDataFeedEvent.InputTuple, RegisteredDataFeedEvent.OutputTuple, RegisteredDataFeedEvent.OutputObject>;
        RegisteredDataFeed: TypedContractEvent<RegisteredDataFeedEvent.InputTuple, RegisteredDataFeedEvent.OutputTuple, RegisteredDataFeedEvent.OutputObject>;
        "UpdatedDapiNameUpdateParameters(bytes32,bytes)": TypedContractEvent<UpdatedDapiNameUpdateParametersEvent.InputTuple, UpdatedDapiNameUpdateParametersEvent.OutputTuple, UpdatedDapiNameUpdateParametersEvent.OutputObject>;
        UpdatedDapiNameUpdateParameters: TypedContractEvent<UpdatedDapiNameUpdateParametersEvent.InputTuple, UpdatedDapiNameUpdateParametersEvent.OutputTuple, UpdatedDapiNameUpdateParametersEvent.OutputObject>;
        "UpdatedDataFeedIdUpdateParameters(bytes32,bytes)": TypedContractEvent<UpdatedDataFeedIdUpdateParametersEvent.InputTuple, UpdatedDataFeedIdUpdateParametersEvent.OutputTuple, UpdatedDataFeedIdUpdateParametersEvent.OutputObject>;
        UpdatedDataFeedIdUpdateParameters: TypedContractEvent<UpdatedDataFeedIdUpdateParametersEvent.InputTuple, UpdatedDataFeedIdUpdateParametersEvent.OutputTuple, UpdatedDataFeedIdUpdateParametersEvent.OutputObject>;
        "UpdatedSignedApiUrl(address,string)": TypedContractEvent<UpdatedSignedApiUrlEvent.InputTuple, UpdatedSignedApiUrlEvent.OutputTuple, UpdatedSignedApiUrlEvent.OutputObject>;
        UpdatedSignedApiUrl: TypedContractEvent<UpdatedSignedApiUrlEvent.InputTuple, UpdatedSignedApiUrlEvent.OutputTuple, UpdatedSignedApiUrlEvent.OutputObject>;
    };
}
//# sourceMappingURL=IAirseekerRegistry.d.ts.map