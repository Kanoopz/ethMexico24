import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common";
export interface OevAuctionHouseInterface extends Interface {
    getFunction(nameOrSignature: "AUCTIONEER_ROLE_DESCRIPTION" | "FULFILLMENT_REPORTING_PERIOD" | "MAXIMUM_AUCTIONEER_DATA_LENGTH" | "MAXIMUM_BIDDER_DATA_LENGTH" | "MAXIMUM_BID_LIFETIME" | "MINIMUM_BID_LIFETIME" | "PROXY_SETTER_ROLE_DESCRIPTION" | "WITHDRAWAL_WAITING_PERIOD" | "WITHDRAWER_ROLE_DESCRIPTION" | "accessControlRegistry" | "accumulatedProtocolFees" | "accumulatedSlashedCollateral" | "adminRole" | "adminRoleDescription" | "auctioneerRole" | "awardBid" | "bidderToBalance" | "bidderToEarliestWithdrawalTimestamp" | "bids" | "cancelWithdrawal" | "chainIdToNativeCurrencyRateProxy" | "collateralInBasisPoints" | "collateralRateProxy" | "confirmFulfillment" | "contradictFulfillment" | "deposit" | "depositForBidder" | "expediteBidExpiration" | "expediteBidExpirationMaximally" | "getCurrentCollateralAndProtocolFeeAmounts" | "initiateWithdrawal" | "manager" | "multicall" | "placeBid" | "placeBidWithExpiration" | "protocolFeeInBasisPoints" | "proxySetterRole" | "reportFulfillment" | "setChainNativeCurrencyRateProxy" | "setCollateralInBasisPoints" | "setCollateralRateProxy" | "setProtocolFeeInBasisPoints" | "tryMulticall" | "withdraw" | "withdrawAccumulatedProtocolFees" | "withdrawAccumulatedSlashedCollateral" | "withdrawerRole"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "AwardedBid" | "CanceledWithdrawal" | "ConfirmedFulfillment" | "ContradictedFulfillment" | "Deposited" | "ExpeditedBidExpiration" | "InitiatedWithdrawal" | "PlacedBid" | "ReportedFulfillment" | "SetChainNativeCurrencyRateProxy" | "SetCollateralInBasisPoints" | "SetCollateralRateProxy" | "SetProtocolFeeInBasisPoints" | "Withdrew" | "WithdrewAccumulatedProtocolFees" | "WithdrewAccumulatedSlashedCollateral"): EventFragment;
    encodeFunctionData(functionFragment: "AUCTIONEER_ROLE_DESCRIPTION", values?: undefined): string;
    encodeFunctionData(functionFragment: "FULFILLMENT_REPORTING_PERIOD", values?: undefined): string;
    encodeFunctionData(functionFragment: "MAXIMUM_AUCTIONEER_DATA_LENGTH", values?: undefined): string;
    encodeFunctionData(functionFragment: "MAXIMUM_BIDDER_DATA_LENGTH", values?: undefined): string;
    encodeFunctionData(functionFragment: "MAXIMUM_BID_LIFETIME", values?: undefined): string;
    encodeFunctionData(functionFragment: "MINIMUM_BID_LIFETIME", values?: undefined): string;
    encodeFunctionData(functionFragment: "PROXY_SETTER_ROLE_DESCRIPTION", values?: undefined): string;
    encodeFunctionData(functionFragment: "WITHDRAWAL_WAITING_PERIOD", values?: undefined): string;
    encodeFunctionData(functionFragment: "WITHDRAWER_ROLE_DESCRIPTION", values?: undefined): string;
    encodeFunctionData(functionFragment: "accessControlRegistry", values?: undefined): string;
    encodeFunctionData(functionFragment: "accumulatedProtocolFees", values?: undefined): string;
    encodeFunctionData(functionFragment: "accumulatedSlashedCollateral", values?: undefined): string;
    encodeFunctionData(functionFragment: "adminRole", values?: undefined): string;
    encodeFunctionData(functionFragment: "adminRoleDescription", values?: undefined): string;
    encodeFunctionData(functionFragment: "auctioneerRole", values?: undefined): string;
    encodeFunctionData(functionFragment: "awardBid", values: [AddressLike, BytesLike, BytesLike, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "bidderToBalance", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "bidderToEarliestWithdrawalTimestamp", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "bids", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "cancelWithdrawal", values?: undefined): string;
    encodeFunctionData(functionFragment: "chainIdToNativeCurrencyRateProxy", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "collateralInBasisPoints", values?: undefined): string;
    encodeFunctionData(functionFragment: "collateralRateProxy", values?: undefined): string;
    encodeFunctionData(functionFragment: "confirmFulfillment", values: [AddressLike, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "contradictFulfillment", values: [AddressLike, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
    encodeFunctionData(functionFragment: "depositForBidder", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "expediteBidExpiration", values: [BytesLike, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "expediteBidExpirationMaximally", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "getCurrentCollateralAndProtocolFeeAmounts", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "initiateWithdrawal", values?: undefined): string;
    encodeFunctionData(functionFragment: "manager", values?: undefined): string;
    encodeFunctionData(functionFragment: "multicall", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "placeBid", values: [
        BytesLike,
        BigNumberish,
        BigNumberish,
        BytesLike,
        BigNumberish,
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "placeBidWithExpiration", values: [
        BytesLike,
        BigNumberish,
        BigNumberish,
        BytesLike,
        BigNumberish,
        BigNumberish,
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "protocolFeeInBasisPoints", values?: undefined): string;
    encodeFunctionData(functionFragment: "proxySetterRole", values?: undefined): string;
    encodeFunctionData(functionFragment: "reportFulfillment", values: [BytesLike, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "setChainNativeCurrencyRateProxy", values: [BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "setCollateralInBasisPoints", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setCollateralRateProxy", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setProtocolFeeInBasisPoints", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "tryMulticall", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "withdraw", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdrawAccumulatedProtocolFees", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdrawAccumulatedSlashedCollateral", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdrawerRole", values?: undefined): string;
    decodeFunctionResult(functionFragment: "AUCTIONEER_ROLE_DESCRIPTION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "FULFILLMENT_REPORTING_PERIOD", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MAXIMUM_AUCTIONEER_DATA_LENGTH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MAXIMUM_BIDDER_DATA_LENGTH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MAXIMUM_BID_LIFETIME", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MINIMUM_BID_LIFETIME", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PROXY_SETTER_ROLE_DESCRIPTION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "WITHDRAWAL_WAITING_PERIOD", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "WITHDRAWER_ROLE_DESCRIPTION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "accessControlRegistry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "accumulatedProtocolFees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "accumulatedSlashedCollateral", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "adminRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "adminRoleDescription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "auctioneerRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "awardBid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bidderToBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bidderToEarliestWithdrawalTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cancelWithdrawal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "chainIdToNativeCurrencyRateProxy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "collateralInBasisPoints", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "collateralRateProxy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "confirmFulfillment", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "contradictFulfillment", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositForBidder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "expediteBidExpiration", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "expediteBidExpirationMaximally", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCurrentCollateralAndProtocolFeeAmounts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initiateWithdrawal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "placeBidWithExpiration", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolFeeInBasisPoints", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxySetterRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "reportFulfillment", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setChainNativeCurrencyRateProxy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setCollateralInBasisPoints", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setCollateralRateProxy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setProtocolFeeInBasisPoints", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tryMulticall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawAccumulatedProtocolFees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawAccumulatedSlashedCollateral", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawerRole", data: BytesLike): Result;
}
export declare namespace AwardedBidEvent {
    type InputTuple = [
        bidder: AddressLike,
        bidTopic: BytesLike,
        bidId: BytesLike,
        awardDetails: BytesLike,
        bidderBalance: BigNumberish
    ];
    type OutputTuple = [
        bidder: string,
        bidTopic: string,
        bidId: string,
        awardDetails: string,
        bidderBalance: bigint
    ];
    interface OutputObject {
        bidder: string;
        bidTopic: string;
        bidId: string;
        awardDetails: string;
        bidderBalance: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace CanceledWithdrawalEvent {
    type InputTuple = [bidder: AddressLike];
    type OutputTuple = [bidder: string];
    interface OutputObject {
        bidder: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace ConfirmedFulfillmentEvent {
    type InputTuple = [
        bidder: AddressLike,
        bidTopic: BytesLike,
        bidId: BytesLike,
        bidderBalance: BigNumberish,
        accumulatedProtocolFees: BigNumberish
    ];
    type OutputTuple = [
        bidder: string,
        bidTopic: string,
        bidId: string,
        bidderBalance: bigint,
        accumulatedProtocolFees: bigint
    ];
    interface OutputObject {
        bidder: string;
        bidTopic: string;
        bidId: string;
        bidderBalance: bigint;
        accumulatedProtocolFees: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace ContradictedFulfillmentEvent {
    type InputTuple = [
        bidder: AddressLike,
        bidTopic: BytesLike,
        bidId: BytesLike,
        bidderBalance: BigNumberish,
        accumulatedSlashedCollateral: BigNumberish
    ];
    type OutputTuple = [
        bidder: string,
        bidTopic: string,
        bidId: string,
        bidderBalance: bigint,
        accumulatedSlashedCollateral: bigint
    ];
    interface OutputObject {
        bidder: string;
        bidTopic: string;
        bidId: string;
        bidderBalance: bigint;
        accumulatedSlashedCollateral: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace DepositedEvent {
    type InputTuple = [
        bidder: AddressLike,
        amount: BigNumberish,
        bidderBalance: BigNumberish,
        sender: AddressLike
    ];
    type OutputTuple = [
        bidder: string,
        amount: bigint,
        bidderBalance: bigint,
        sender: string
    ];
    interface OutputObject {
        bidder: string;
        amount: bigint;
        bidderBalance: bigint;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace ExpeditedBidExpirationEvent {
    type InputTuple = [
        bidder: AddressLike,
        bidTopic: BytesLike,
        bidId: BytesLike,
        expirationTimestamp: BigNumberish
    ];
    type OutputTuple = [
        bidder: string,
        bidTopic: string,
        bidId: string,
        expirationTimestamp: bigint
    ];
    interface OutputObject {
        bidder: string;
        bidTopic: string;
        bidId: string;
        expirationTimestamp: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace InitiatedWithdrawalEvent {
    type InputTuple = [
        bidder: AddressLike,
        earliestWithdrawalTimestamp: BigNumberish
    ];
    type OutputTuple = [
        bidder: string,
        earliestWithdrawalTimestamp: bigint
    ];
    interface OutputObject {
        bidder: string;
        earliestWithdrawalTimestamp: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace PlacedBidEvent {
    type InputTuple = [
        bidder: AddressLike,
        bidTopic: BytesLike,
        bidId: BytesLike,
        chainId: BigNumberish,
        bidAmount: BigNumberish,
        bidDetails: BytesLike,
        expirationTimestamp: BigNumberish,
        collateralAmount: BigNumberish,
        protocolFeeAmount: BigNumberish
    ];
    type OutputTuple = [
        bidder: string,
        bidTopic: string,
        bidId: string,
        chainId: bigint,
        bidAmount: bigint,
        bidDetails: string,
        expirationTimestamp: bigint,
        collateralAmount: bigint,
        protocolFeeAmount: bigint
    ];
    interface OutputObject {
        bidder: string;
        bidTopic: string;
        bidId: string;
        chainId: bigint;
        bidAmount: bigint;
        bidDetails: string;
        expirationTimestamp: bigint;
        collateralAmount: bigint;
        protocolFeeAmount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace ReportedFulfillmentEvent {
    type InputTuple = [
        bidder: AddressLike,
        bidTopic: BytesLike,
        bidId: BytesLike,
        fulfillmentDetails: BytesLike
    ];
    type OutputTuple = [
        bidder: string,
        bidTopic: string,
        bidId: string,
        fulfillmentDetails: string
    ];
    interface OutputObject {
        bidder: string;
        bidTopic: string;
        bidId: string;
        fulfillmentDetails: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace SetChainNativeCurrencyRateProxyEvent {
    type InputTuple = [
        chainId: BigNumberish,
        nativeCurrencyRateProxy: AddressLike
    ];
    type OutputTuple = [chainId: bigint, nativeCurrencyRateProxy: string];
    interface OutputObject {
        chainId: bigint;
        nativeCurrencyRateProxy: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace SetCollateralInBasisPointsEvent {
    type InputTuple = [collateralInBasisPoints: BigNumberish];
    type OutputTuple = [collateralInBasisPoints: bigint];
    interface OutputObject {
        collateralInBasisPoints: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace SetCollateralRateProxyEvent {
    type InputTuple = [collateralRateProxy: AddressLike];
    type OutputTuple = [collateralRateProxy: string];
    interface OutputObject {
        collateralRateProxy: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace SetProtocolFeeInBasisPointsEvent {
    type InputTuple = [protocolFeeInBasisPoints: BigNumberish];
    type OutputTuple = [protocolFeeInBasisPoints: bigint];
    interface OutputObject {
        protocolFeeInBasisPoints: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace WithdrewEvent {
    type InputTuple = [
        bidder: AddressLike,
        recipient: AddressLike,
        amount: BigNumberish
    ];
    type OutputTuple = [bidder: string, recipient: string, amount: bigint];
    interface OutputObject {
        bidder: string;
        recipient: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace WithdrewAccumulatedProtocolFeesEvent {
    type InputTuple = [recipient: AddressLike, amount: BigNumberish];
    type OutputTuple = [recipient: string, amount: bigint];
    interface OutputObject {
        recipient: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace WithdrewAccumulatedSlashedCollateralEvent {
    type InputTuple = [recipient: AddressLike, amount: BigNumberish];
    type OutputTuple = [recipient: string, amount: bigint];
    interface OutputObject {
        recipient: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface OevAuctionHouse extends BaseContract {
    connect(runner?: ContractRunner | null): OevAuctionHouse;
    waitForDeployment(): Promise<this>;
    interface: OevAuctionHouseInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    AUCTIONEER_ROLE_DESCRIPTION: TypedContractMethod<[], [string], "view">;
    FULFILLMENT_REPORTING_PERIOD: TypedContractMethod<[], [bigint], "view">;
    MAXIMUM_AUCTIONEER_DATA_LENGTH: TypedContractMethod<[], [bigint], "view">;
    MAXIMUM_BIDDER_DATA_LENGTH: TypedContractMethod<[], [bigint], "view">;
    MAXIMUM_BID_LIFETIME: TypedContractMethod<[], [bigint], "view">;
    MINIMUM_BID_LIFETIME: TypedContractMethod<[], [bigint], "view">;
    PROXY_SETTER_ROLE_DESCRIPTION: TypedContractMethod<[], [string], "view">;
    WITHDRAWAL_WAITING_PERIOD: TypedContractMethod<[], [bigint], "view">;
    WITHDRAWER_ROLE_DESCRIPTION: TypedContractMethod<[], [string], "view">;
    accessControlRegistry: TypedContractMethod<[], [string], "view">;
    accumulatedProtocolFees: TypedContractMethod<[], [bigint], "view">;
    accumulatedSlashedCollateral: TypedContractMethod<[], [bigint], "view">;
    adminRole: TypedContractMethod<[], [string], "view">;
    adminRoleDescription: TypedContractMethod<[], [string], "view">;
    auctioneerRole: TypedContractMethod<[], [string], "view">;
    awardBid: TypedContractMethod<[
        bidder: AddressLike,
        bidTopic: BytesLike,
        bidDetailsHash: BytesLike,
        awardDetails: BytesLike,
        awardExpirationTimestamp: BigNumberish
    ], [
        bigint
    ], "nonpayable">;
    bidderToBalance: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    bidderToEarliestWithdrawalTimestamp: TypedContractMethod<[
        arg0: AddressLike
    ], [
        bigint
    ], "view">;
    bids: TypedContractMethod<[
        arg0: BytesLike
    ], [
        [
            bigint,
            bigint,
            bigint,
            bigint
        ] & {
            status: bigint;
            expirationTimestamp: bigint;
            collateralAmount: bigint;
            protocolFeeAmount: bigint;
        }
    ], "view">;
    cancelWithdrawal: TypedContractMethod<[], [void], "nonpayable">;
    chainIdToNativeCurrencyRateProxy: TypedContractMethod<[
        arg0: BigNumberish
    ], [
        string
    ], "view">;
    collateralInBasisPoints: TypedContractMethod<[], [bigint], "view">;
    collateralRateProxy: TypedContractMethod<[], [string], "view">;
    confirmFulfillment: TypedContractMethod<[
        bidder: AddressLike,
        bidTopic: BytesLike,
        bidDetailsHash: BytesLike
    ], [
        [
            bigint,
            bigint
        ] & {
            bidderBalance: bigint;
            accumulatedProtocolFees_: bigint;
        }
    ], "nonpayable">;
    contradictFulfillment: TypedContractMethod<[
        bidder: AddressLike,
        bidTopic: BytesLike,
        bidDetailsHash: BytesLike
    ], [
        [
            bigint,
            bigint
        ] & {
            bidderBalance: bigint;
            accumulatedSlashedCollateral_: bigint;
        }
    ], "nonpayable">;
    deposit: TypedContractMethod<[], [bigint], "payable">;
    depositForBidder: TypedContractMethod<[
        bidder: AddressLike
    ], [
        bigint
    ], "payable">;
    expediteBidExpiration: TypedContractMethod<[
        bidTopic: BytesLike,
        bidDetailsHash: BytesLike,
        expirationTimestamp: BigNumberish
    ], [
        void
    ], "nonpayable">;
    expediteBidExpirationMaximally: TypedContractMethod<[
        bidTopic: BytesLike,
        bidDetailsHash: BytesLike
    ], [
        bigint
    ], "nonpayable">;
    getCurrentCollateralAndProtocolFeeAmounts: TypedContractMethod<[
        chainId: BigNumberish,
        bidAmount: BigNumberish
    ], [
        [
            bigint,
            bigint
        ] & {
            collateralAmount: bigint;
            protocolFeeAmount: bigint;
        }
    ], "view">;
    initiateWithdrawal: TypedContractMethod<[], [bigint], "nonpayable">;
    manager: TypedContractMethod<[], [string], "view">;
    multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
    placeBid: TypedContractMethod<[
        bidTopic: BytesLike,
        chainId: BigNumberish,
        bidAmount: BigNumberish,
        bidDetails: BytesLike,
        maxCollateralAmount: BigNumberish,
        maxProtocolFeeAmount: BigNumberish
    ], [
        [
            bigint,
            bigint,
            bigint
        ] & {
            expirationTimestamp: bigint;
            collateralAmount: bigint;
            protocolFeeAmount: bigint;
        }
    ], "nonpayable">;
    placeBidWithExpiration: TypedContractMethod<[
        bidTopic: BytesLike,
        chainId: BigNumberish,
        bidAmount: BigNumberish,
        bidDetails: BytesLike,
        maxCollateralAmount: BigNumberish,
        maxProtocolFeeAmount: BigNumberish,
        expirationTimestamp: BigNumberish
    ], [
        [
            bigint,
            bigint
        ] & {
            collateralAmount: bigint;
            protocolFeeAmount: bigint;
        }
    ], "nonpayable">;
    protocolFeeInBasisPoints: TypedContractMethod<[], [bigint], "view">;
    proxySetterRole: TypedContractMethod<[], [string], "view">;
    reportFulfillment: TypedContractMethod<[
        bidTopic: BytesLike,
        bidDetailsHash: BytesLike,
        fulfillmentDetails: BytesLike
    ], [
        void
    ], "nonpayable">;
    setChainNativeCurrencyRateProxy: TypedContractMethod<[
        chainId: BigNumberish,
        nativeCurrencyRateProxy: AddressLike
    ], [
        void
    ], "nonpayable">;
    setCollateralInBasisPoints: TypedContractMethod<[
        collateralInBasisPoints_: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setCollateralRateProxy: TypedContractMethod<[
        collateralRateProxy_: AddressLike
    ], [
        void
    ], "nonpayable">;
    setProtocolFeeInBasisPoints: TypedContractMethod<[
        protocolFeeInBasisPoints_: BigNumberish
    ], [
        void
    ], "nonpayable">;
    tryMulticall: TypedContractMethod<[
        data: BytesLike[]
    ], [
        [boolean[], string[]] & {
            successes: boolean[];
            returndata: string[];
        }
    ], "nonpayable">;
    withdraw: TypedContractMethod<[
        recipient: AddressLike,
        amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    withdrawAccumulatedProtocolFees: TypedContractMethod<[
        recipient: AddressLike,
        amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    withdrawAccumulatedSlashedCollateral: TypedContractMethod<[
        recipient: AddressLike,
        amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    withdrawerRole: TypedContractMethod<[], [string], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "AUCTIONEER_ROLE_DESCRIPTION"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "FULFILLMENT_REPORTING_PERIOD"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "MAXIMUM_AUCTIONEER_DATA_LENGTH"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "MAXIMUM_BIDDER_DATA_LENGTH"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "MAXIMUM_BID_LIFETIME"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "MINIMUM_BID_LIFETIME"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "PROXY_SETTER_ROLE_DESCRIPTION"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "WITHDRAWAL_WAITING_PERIOD"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "WITHDRAWER_ROLE_DESCRIPTION"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "accessControlRegistry"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "accumulatedProtocolFees"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "accumulatedSlashedCollateral"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "adminRole"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "adminRoleDescription"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "auctioneerRole"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "awardBid"): TypedContractMethod<[
        bidder: AddressLike,
        bidTopic: BytesLike,
        bidDetailsHash: BytesLike,
        awardDetails: BytesLike,
        awardExpirationTimestamp: BigNumberish
    ], [
        bigint
    ], "nonpayable">;
    getFunction(nameOrSignature: "bidderToBalance"): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "bidderToEarliestWithdrawalTimestamp"): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "bids"): TypedContractMethod<[
        arg0: BytesLike
    ], [
        [
            bigint,
            bigint,
            bigint,
            bigint
        ] & {
            status: bigint;
            expirationTimestamp: bigint;
            collateralAmount: bigint;
            protocolFeeAmount: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "cancelWithdrawal"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "chainIdToNativeCurrencyRateProxy"): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "collateralInBasisPoints"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "collateralRateProxy"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "confirmFulfillment"): TypedContractMethod<[
        bidder: AddressLike,
        bidTopic: BytesLike,
        bidDetailsHash: BytesLike
    ], [
        [
            bigint,
            bigint
        ] & {
            bidderBalance: bigint;
            accumulatedProtocolFees_: bigint;
        }
    ], "nonpayable">;
    getFunction(nameOrSignature: "contradictFulfillment"): TypedContractMethod<[
        bidder: AddressLike,
        bidTopic: BytesLike,
        bidDetailsHash: BytesLike
    ], [
        [
            bigint,
            bigint
        ] & {
            bidderBalance: bigint;
            accumulatedSlashedCollateral_: bigint;
        }
    ], "nonpayable">;
    getFunction(nameOrSignature: "deposit"): TypedContractMethod<[], [bigint], "payable">;
    getFunction(nameOrSignature: "depositForBidder"): TypedContractMethod<[bidder: AddressLike], [bigint], "payable">;
    getFunction(nameOrSignature: "expediteBidExpiration"): TypedContractMethod<[
        bidTopic: BytesLike,
        bidDetailsHash: BytesLike,
        expirationTimestamp: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "expediteBidExpirationMaximally"): TypedContractMethod<[
        bidTopic: BytesLike,
        bidDetailsHash: BytesLike
    ], [
        bigint
    ], "nonpayable">;
    getFunction(nameOrSignature: "getCurrentCollateralAndProtocolFeeAmounts"): TypedContractMethod<[
        chainId: BigNumberish,
        bidAmount: BigNumberish
    ], [
        [
            bigint,
            bigint
        ] & {
            collateralAmount: bigint;
            protocolFeeAmount: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "initiateWithdrawal"): TypedContractMethod<[], [bigint], "nonpayable">;
    getFunction(nameOrSignature: "manager"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "multicall"): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
    getFunction(nameOrSignature: "placeBid"): TypedContractMethod<[
        bidTopic: BytesLike,
        chainId: BigNumberish,
        bidAmount: BigNumberish,
        bidDetails: BytesLike,
        maxCollateralAmount: BigNumberish,
        maxProtocolFeeAmount: BigNumberish
    ], [
        [
            bigint,
            bigint,
            bigint
        ] & {
            expirationTimestamp: bigint;
            collateralAmount: bigint;
            protocolFeeAmount: bigint;
        }
    ], "nonpayable">;
    getFunction(nameOrSignature: "placeBidWithExpiration"): TypedContractMethod<[
        bidTopic: BytesLike,
        chainId: BigNumberish,
        bidAmount: BigNumberish,
        bidDetails: BytesLike,
        maxCollateralAmount: BigNumberish,
        maxProtocolFeeAmount: BigNumberish,
        expirationTimestamp: BigNumberish
    ], [
        [
            bigint,
            bigint
        ] & {
            collateralAmount: bigint;
            protocolFeeAmount: bigint;
        }
    ], "nonpayable">;
    getFunction(nameOrSignature: "protocolFeeInBasisPoints"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "proxySetterRole"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "reportFulfillment"): TypedContractMethod<[
        bidTopic: BytesLike,
        bidDetailsHash: BytesLike,
        fulfillmentDetails: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setChainNativeCurrencyRateProxy"): TypedContractMethod<[
        chainId: BigNumberish,
        nativeCurrencyRateProxy: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setCollateralInBasisPoints"): TypedContractMethod<[
        collateralInBasisPoints_: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setCollateralRateProxy"): TypedContractMethod<[
        collateralRateProxy_: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setProtocolFeeInBasisPoints"): TypedContractMethod<[
        protocolFeeInBasisPoints_: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "tryMulticall"): TypedContractMethod<[
        data: BytesLike[]
    ], [
        [boolean[], string[]] & {
            successes: boolean[];
            returndata: string[];
        }
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdraw"): TypedContractMethod<[
        recipient: AddressLike,
        amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdrawAccumulatedProtocolFees"): TypedContractMethod<[
        recipient: AddressLike,
        amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdrawAccumulatedSlashedCollateral"): TypedContractMethod<[
        recipient: AddressLike,
        amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdrawerRole"): TypedContractMethod<[], [string], "view">;
    getEvent(key: "AwardedBid"): TypedContractEvent<AwardedBidEvent.InputTuple, AwardedBidEvent.OutputTuple, AwardedBidEvent.OutputObject>;
    getEvent(key: "CanceledWithdrawal"): TypedContractEvent<CanceledWithdrawalEvent.InputTuple, CanceledWithdrawalEvent.OutputTuple, CanceledWithdrawalEvent.OutputObject>;
    getEvent(key: "ConfirmedFulfillment"): TypedContractEvent<ConfirmedFulfillmentEvent.InputTuple, ConfirmedFulfillmentEvent.OutputTuple, ConfirmedFulfillmentEvent.OutputObject>;
    getEvent(key: "ContradictedFulfillment"): TypedContractEvent<ContradictedFulfillmentEvent.InputTuple, ContradictedFulfillmentEvent.OutputTuple, ContradictedFulfillmentEvent.OutputObject>;
    getEvent(key: "Deposited"): TypedContractEvent<DepositedEvent.InputTuple, DepositedEvent.OutputTuple, DepositedEvent.OutputObject>;
    getEvent(key: "ExpeditedBidExpiration"): TypedContractEvent<ExpeditedBidExpirationEvent.InputTuple, ExpeditedBidExpirationEvent.OutputTuple, ExpeditedBidExpirationEvent.OutputObject>;
    getEvent(key: "InitiatedWithdrawal"): TypedContractEvent<InitiatedWithdrawalEvent.InputTuple, InitiatedWithdrawalEvent.OutputTuple, InitiatedWithdrawalEvent.OutputObject>;
    getEvent(key: "PlacedBid"): TypedContractEvent<PlacedBidEvent.InputTuple, PlacedBidEvent.OutputTuple, PlacedBidEvent.OutputObject>;
    getEvent(key: "ReportedFulfillment"): TypedContractEvent<ReportedFulfillmentEvent.InputTuple, ReportedFulfillmentEvent.OutputTuple, ReportedFulfillmentEvent.OutputObject>;
    getEvent(key: "SetChainNativeCurrencyRateProxy"): TypedContractEvent<SetChainNativeCurrencyRateProxyEvent.InputTuple, SetChainNativeCurrencyRateProxyEvent.OutputTuple, SetChainNativeCurrencyRateProxyEvent.OutputObject>;
    getEvent(key: "SetCollateralInBasisPoints"): TypedContractEvent<SetCollateralInBasisPointsEvent.InputTuple, SetCollateralInBasisPointsEvent.OutputTuple, SetCollateralInBasisPointsEvent.OutputObject>;
    getEvent(key: "SetCollateralRateProxy"): TypedContractEvent<SetCollateralRateProxyEvent.InputTuple, SetCollateralRateProxyEvent.OutputTuple, SetCollateralRateProxyEvent.OutputObject>;
    getEvent(key: "SetProtocolFeeInBasisPoints"): TypedContractEvent<SetProtocolFeeInBasisPointsEvent.InputTuple, SetProtocolFeeInBasisPointsEvent.OutputTuple, SetProtocolFeeInBasisPointsEvent.OutputObject>;
    getEvent(key: "Withdrew"): TypedContractEvent<WithdrewEvent.InputTuple, WithdrewEvent.OutputTuple, WithdrewEvent.OutputObject>;
    getEvent(key: "WithdrewAccumulatedProtocolFees"): TypedContractEvent<WithdrewAccumulatedProtocolFeesEvent.InputTuple, WithdrewAccumulatedProtocolFeesEvent.OutputTuple, WithdrewAccumulatedProtocolFeesEvent.OutputObject>;
    getEvent(key: "WithdrewAccumulatedSlashedCollateral"): TypedContractEvent<WithdrewAccumulatedSlashedCollateralEvent.InputTuple, WithdrewAccumulatedSlashedCollateralEvent.OutputTuple, WithdrewAccumulatedSlashedCollateralEvent.OutputObject>;
    filters: {
        "AwardedBid(address,bytes32,bytes32,bytes,uint256)": TypedContractEvent<AwardedBidEvent.InputTuple, AwardedBidEvent.OutputTuple, AwardedBidEvent.OutputObject>;
        AwardedBid: TypedContractEvent<AwardedBidEvent.InputTuple, AwardedBidEvent.OutputTuple, AwardedBidEvent.OutputObject>;
        "CanceledWithdrawal(address)": TypedContractEvent<CanceledWithdrawalEvent.InputTuple, CanceledWithdrawalEvent.OutputTuple, CanceledWithdrawalEvent.OutputObject>;
        CanceledWithdrawal: TypedContractEvent<CanceledWithdrawalEvent.InputTuple, CanceledWithdrawalEvent.OutputTuple, CanceledWithdrawalEvent.OutputObject>;
        "ConfirmedFulfillment(address,bytes32,bytes32,uint256,uint256)": TypedContractEvent<ConfirmedFulfillmentEvent.InputTuple, ConfirmedFulfillmentEvent.OutputTuple, ConfirmedFulfillmentEvent.OutputObject>;
        ConfirmedFulfillment: TypedContractEvent<ConfirmedFulfillmentEvent.InputTuple, ConfirmedFulfillmentEvent.OutputTuple, ConfirmedFulfillmentEvent.OutputObject>;
        "ContradictedFulfillment(address,bytes32,bytes32,uint256,uint256)": TypedContractEvent<ContradictedFulfillmentEvent.InputTuple, ContradictedFulfillmentEvent.OutputTuple, ContradictedFulfillmentEvent.OutputObject>;
        ContradictedFulfillment: TypedContractEvent<ContradictedFulfillmentEvent.InputTuple, ContradictedFulfillmentEvent.OutputTuple, ContradictedFulfillmentEvent.OutputObject>;
        "Deposited(address,uint256,uint256,address)": TypedContractEvent<DepositedEvent.InputTuple, DepositedEvent.OutputTuple, DepositedEvent.OutputObject>;
        Deposited: TypedContractEvent<DepositedEvent.InputTuple, DepositedEvent.OutputTuple, DepositedEvent.OutputObject>;
        "ExpeditedBidExpiration(address,bytes32,bytes32,uint32)": TypedContractEvent<ExpeditedBidExpirationEvent.InputTuple, ExpeditedBidExpirationEvent.OutputTuple, ExpeditedBidExpirationEvent.OutputObject>;
        ExpeditedBidExpiration: TypedContractEvent<ExpeditedBidExpirationEvent.InputTuple, ExpeditedBidExpirationEvent.OutputTuple, ExpeditedBidExpirationEvent.OutputObject>;
        "InitiatedWithdrawal(address,uint256)": TypedContractEvent<InitiatedWithdrawalEvent.InputTuple, InitiatedWithdrawalEvent.OutputTuple, InitiatedWithdrawalEvent.OutputObject>;
        InitiatedWithdrawal: TypedContractEvent<InitiatedWithdrawalEvent.InputTuple, InitiatedWithdrawalEvent.OutputTuple, InitiatedWithdrawalEvent.OutputObject>;
        "PlacedBid(address,bytes32,bytes32,uint256,uint256,bytes,uint32,uint104,uint104)": TypedContractEvent<PlacedBidEvent.InputTuple, PlacedBidEvent.OutputTuple, PlacedBidEvent.OutputObject>;
        PlacedBid: TypedContractEvent<PlacedBidEvent.InputTuple, PlacedBidEvent.OutputTuple, PlacedBidEvent.OutputObject>;
        "ReportedFulfillment(address,bytes32,bytes32,bytes)": TypedContractEvent<ReportedFulfillmentEvent.InputTuple, ReportedFulfillmentEvent.OutputTuple, ReportedFulfillmentEvent.OutputObject>;
        ReportedFulfillment: TypedContractEvent<ReportedFulfillmentEvent.InputTuple, ReportedFulfillmentEvent.OutputTuple, ReportedFulfillmentEvent.OutputObject>;
        "SetChainNativeCurrencyRateProxy(uint256,address)": TypedContractEvent<SetChainNativeCurrencyRateProxyEvent.InputTuple, SetChainNativeCurrencyRateProxyEvent.OutputTuple, SetChainNativeCurrencyRateProxyEvent.OutputObject>;
        SetChainNativeCurrencyRateProxy: TypedContractEvent<SetChainNativeCurrencyRateProxyEvent.InputTuple, SetChainNativeCurrencyRateProxyEvent.OutputTuple, SetChainNativeCurrencyRateProxyEvent.OutputObject>;
        "SetCollateralInBasisPoints(uint256)": TypedContractEvent<SetCollateralInBasisPointsEvent.InputTuple, SetCollateralInBasisPointsEvent.OutputTuple, SetCollateralInBasisPointsEvent.OutputObject>;
        SetCollateralInBasisPoints: TypedContractEvent<SetCollateralInBasisPointsEvent.InputTuple, SetCollateralInBasisPointsEvent.OutputTuple, SetCollateralInBasisPointsEvent.OutputObject>;
        "SetCollateralRateProxy(address)": TypedContractEvent<SetCollateralRateProxyEvent.InputTuple, SetCollateralRateProxyEvent.OutputTuple, SetCollateralRateProxyEvent.OutputObject>;
        SetCollateralRateProxy: TypedContractEvent<SetCollateralRateProxyEvent.InputTuple, SetCollateralRateProxyEvent.OutputTuple, SetCollateralRateProxyEvent.OutputObject>;
        "SetProtocolFeeInBasisPoints(uint256)": TypedContractEvent<SetProtocolFeeInBasisPointsEvent.InputTuple, SetProtocolFeeInBasisPointsEvent.OutputTuple, SetProtocolFeeInBasisPointsEvent.OutputObject>;
        SetProtocolFeeInBasisPoints: TypedContractEvent<SetProtocolFeeInBasisPointsEvent.InputTuple, SetProtocolFeeInBasisPointsEvent.OutputTuple, SetProtocolFeeInBasisPointsEvent.OutputObject>;
        "Withdrew(address,address,uint256)": TypedContractEvent<WithdrewEvent.InputTuple, WithdrewEvent.OutputTuple, WithdrewEvent.OutputObject>;
        Withdrew: TypedContractEvent<WithdrewEvent.InputTuple, WithdrewEvent.OutputTuple, WithdrewEvent.OutputObject>;
        "WithdrewAccumulatedProtocolFees(address,uint256)": TypedContractEvent<WithdrewAccumulatedProtocolFeesEvent.InputTuple, WithdrewAccumulatedProtocolFeesEvent.OutputTuple, WithdrewAccumulatedProtocolFeesEvent.OutputObject>;
        WithdrewAccumulatedProtocolFees: TypedContractEvent<WithdrewAccumulatedProtocolFeesEvent.InputTuple, WithdrewAccumulatedProtocolFeesEvent.OutputTuple, WithdrewAccumulatedProtocolFeesEvent.OutputObject>;
        "WithdrewAccumulatedSlashedCollateral(address,uint256)": TypedContractEvent<WithdrewAccumulatedSlashedCollateralEvent.InputTuple, WithdrewAccumulatedSlashedCollateralEvent.OutputTuple, WithdrewAccumulatedSlashedCollateralEvent.OutputObject>;
        WithdrewAccumulatedSlashedCollateral: TypedContractEvent<WithdrewAccumulatedSlashedCollateralEvent.InputTuple, WithdrewAccumulatedSlashedCollateralEvent.OutputTuple, WithdrewAccumulatedSlashedCollateralEvent.OutputObject>;
    };
}
//# sourceMappingURL=OevAuctionHouse.d.ts.map