import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../common";
export interface MockCallForwarderTargetInterface extends Interface {
    getFunction(nameOrSignature: "nonpayableTargetFunction" | "payableTargetFunction" | "storage1" | "storage2"): FunctionFragment;
    encodeFunctionData(functionFragment: "nonpayableTargetFunction", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "payableTargetFunction", values: [string, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "storage1", values?: undefined): string;
    encodeFunctionData(functionFragment: "storage2", values?: undefined): string;
    decodeFunctionResult(functionFragment: "nonpayableTargetFunction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "payableTargetFunction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "storage1", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "storage2", data: BytesLike): Result;
}
export interface MockCallForwarderTarget extends BaseContract {
    connect(runner?: ContractRunner | null): MockCallForwarderTarget;
    waitForDeployment(): Promise<this>;
    interface: MockCallForwarderTargetInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    nonpayableTargetFunction: TypedContractMethod<[
        input1: string,
        input2: BigNumberish
    ], [
        [string, boolean] & {
            output1: string;
            output2: boolean;
        }
    ], "nonpayable">;
    payableTargetFunction: TypedContractMethod<[
        input1: string,
        input2: BigNumberish,
        msgValue: BigNumberish
    ], [
        [string, boolean] & {
            output1: string;
            output2: boolean;
        }
    ], "payable">;
    storage1: TypedContractMethod<[], [string], "view">;
    storage2: TypedContractMethod<[], [bigint], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "nonpayableTargetFunction"): TypedContractMethod<[
        input1: string,
        input2: BigNumberish
    ], [
        [string, boolean] & {
            output1: string;
            output2: boolean;
        }
    ], "nonpayable">;
    getFunction(nameOrSignature: "payableTargetFunction"): TypedContractMethod<[
        input1: string,
        input2: BigNumberish,
        msgValue: BigNumberish
    ], [
        [string, boolean] & {
            output1: string;
            output2: boolean;
        }
    ], "payable">;
    getFunction(nameOrSignature: "storage1"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "storage2"): TypedContractMethod<[], [bigint], "view">;
    filters: {};
}
//# sourceMappingURL=MockCallForwarderTarget.d.ts.map