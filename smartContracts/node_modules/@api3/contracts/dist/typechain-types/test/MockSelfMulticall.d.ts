import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../common";
export interface MockSelfMulticallInterface extends Interface {
    getFunction(nameOrSignature: "alwaysRevertsWithCustomError" | "alwaysRevertsWithNoData" | "alwaysRevertsWithString" | "argumentHistory" | "convertsPositiveArgumentToNegative" | "multicall" | "tryMulticall"): FunctionFragment;
    encodeFunctionData(functionFragment: "alwaysRevertsWithCustomError", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "alwaysRevertsWithNoData", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "alwaysRevertsWithString", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "argumentHistory", values?: undefined): string;
    encodeFunctionData(functionFragment: "convertsPositiveArgumentToNegative", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "multicall", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "tryMulticall", values: [BytesLike[]]): string;
    decodeFunctionResult(functionFragment: "alwaysRevertsWithCustomError", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "alwaysRevertsWithNoData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "alwaysRevertsWithString", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "argumentHistory", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "convertsPositiveArgumentToNegative", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tryMulticall", data: BytesLike): Result;
}
export interface MockSelfMulticall extends BaseContract {
    connect(runner?: ContractRunner | null): MockSelfMulticall;
    waitForDeployment(): Promise<this>;
    interface: MockSelfMulticallInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    alwaysRevertsWithCustomError: TypedContractMethod<[
        argPositive: BigNumberish,
        argNegative: BigNumberish
    ], [
        void
    ], "view">;
    alwaysRevertsWithNoData: TypedContractMethod<[
        argPositive: BigNumberish,
        argNegative: BigNumberish
    ], [
        void
    ], "view">;
    alwaysRevertsWithString: TypedContractMethod<[
        argPositive: BigNumberish,
        argNegative: BigNumberish
    ], [
        void
    ], "view">;
    argumentHistory: TypedContractMethod<[], [bigint[]], "view">;
    convertsPositiveArgumentToNegative: TypedContractMethod<[
        argPositive: BigNumberish
    ], [
        bigint
    ], "payable">;
    multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
    tryMulticall: TypedContractMethod<[
        data: BytesLike[]
    ], [
        [boolean[], string[]] & {
            successes: boolean[];
            returndata: string[];
        }
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "alwaysRevertsWithCustomError"): TypedContractMethod<[
        argPositive: BigNumberish,
        argNegative: BigNumberish
    ], [
        void
    ], "view">;
    getFunction(nameOrSignature: "alwaysRevertsWithNoData"): TypedContractMethod<[
        argPositive: BigNumberish,
        argNegative: BigNumberish
    ], [
        void
    ], "view">;
    getFunction(nameOrSignature: "alwaysRevertsWithString"): TypedContractMethod<[
        argPositive: BigNumberish,
        argNegative: BigNumberish
    ], [
        void
    ], "view">;
    getFunction(nameOrSignature: "argumentHistory"): TypedContractMethod<[], [bigint[]], "view">;
    getFunction(nameOrSignature: "convertsPositiveArgumentToNegative"): TypedContractMethod<[argPositive: BigNumberish], [bigint], "payable">;
    getFunction(nameOrSignature: "multicall"): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
    getFunction(nameOrSignature: "tryMulticall"): TypedContractMethod<[
        data: BytesLike[]
    ], [
        [boolean[], string[]] & {
            successes: boolean[];
            returndata: string[];
        }
    ], "nonpayable">;
    filters: {};
}
//# sourceMappingURL=MockSelfMulticall.d.ts.map