import type { BaseContract, BytesLike, FunctionFragment, Result, Interface, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../common";
export interface AccessControlRegistryAdminnedWithManagerInterface extends Interface {
    getFunction(nameOrSignature: "accessControlRegistry" | "adminRole" | "adminRoleDescription" | "manager" | "multicall" | "tryMulticall"): FunctionFragment;
    encodeFunctionData(functionFragment: "accessControlRegistry", values?: undefined): string;
    encodeFunctionData(functionFragment: "adminRole", values?: undefined): string;
    encodeFunctionData(functionFragment: "adminRoleDescription", values?: undefined): string;
    encodeFunctionData(functionFragment: "manager", values?: undefined): string;
    encodeFunctionData(functionFragment: "multicall", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "tryMulticall", values: [BytesLike[]]): string;
    decodeFunctionResult(functionFragment: "accessControlRegistry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "adminRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "adminRoleDescription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tryMulticall", data: BytesLike): Result;
}
export interface AccessControlRegistryAdminnedWithManager extends BaseContract {
    connect(runner?: ContractRunner | null): AccessControlRegistryAdminnedWithManager;
    waitForDeployment(): Promise<this>;
    interface: AccessControlRegistryAdminnedWithManagerInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    accessControlRegistry: TypedContractMethod<[], [string], "view">;
    adminRole: TypedContractMethod<[], [string], "view">;
    adminRoleDescription: TypedContractMethod<[], [string], "view">;
    manager: TypedContractMethod<[], [string], "view">;
    multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
    tryMulticall: TypedContractMethod<[
        data: BytesLike[]
    ], [
        [boolean[], string[]] & {
            successes: boolean[];
            returndata: string[];
        }
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "accessControlRegistry"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "adminRole"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "adminRoleDescription"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "manager"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "multicall"): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
    getFunction(nameOrSignature: "tryMulticall"): TypedContractMethod<[
        data: BytesLike[]
    ], [
        [boolean[], string[]] & {
            successes: boolean[];
            returndata: string[];
        }
    ], "nonpayable">;
    filters: {};
}
//# sourceMappingURL=AccessControlRegistryAdminnedWithManager.d.ts.map