1.000000000000000000
1000000000000000000

5338554
0.05338554

1.000000000000000000
0.053385540000000000
0.05338554
50000000000000000

10 DECIMALS

0.06391
60000000000000000




https://shibuya.blockscout.com/api





// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface dappStakingPrecompile {
    // Types

    /// Describes the subperiod in which the protocol currently is.
    enum Subperiod {
        Voting,
        BuildAndEarn
    }

    /// Describes current smart contract types supported by the network.
    enum SmartContractType {
        EVM,
        WASM
    }

    /// @notice Describes protocol state.
    /// @param era: Ongoing era number.
    /// @param period: Ongoing period number.
    /// @param subperiod: Ongoing subperiod type.
    struct ProtocolState {
        uint256 era;
        uint256 period;
        Subperiod subperiod;
    }

    /// @notice Used to describe smart contract. Astar supports both EVM & WASM smart contracts
    ///         so it's important to differentiate between the two. This approach also allows
    ///         easy extensibility in the future.
    /// @param contract_type: Type of the smart contract to be used
    struct SmartContract {
        SmartContractType contract_type;
        bytes contract_address;
    }

    // Storage getters

    /// @notice Get the current protocol state.
    /// @return (current era, current period number, current subperiod type).
    function protocol_state() external view returns (ProtocolState memory);

    /// @notice Get the unlocking period expressed in the number of blocks.
    /// @return period: The unlocking period expressed in the number of blocks.
    function unlocking_period() external view returns (uint256);

    // Extrinsic calls

    /// @notice Lock the given amount of tokens into dApp staking protocol.
    /// @param amount: The amount of tokens to be locked.
    function lock(uint128 amount) external returns (bool);

    /// @notice Start the unlocking process for the given amount of tokens.
    /// @param amount: The amount of tokens to be unlocked.
    function unlock(uint128 amount) external returns (bool);

    /// @notice Claims unlocked tokens, if there are any
    function claim_unlocked() external returns (bool);

    /// @notice Stake the given amount of tokens on the specified smart contract.
    ///         The amount specified must be precise, otherwise the call will fail.
    /// @param smart_contract: The smart contract to be staked on.
    /// @param amount: The amount of tokens to be staked.
    function stake(
        SmartContract calldata smart_contract,
        uint128 amount
    ) external returns (bool);

    /// @notice Unstake the given amount of tokens from the specified smart contract.
    ///         The amount specified must be precise, otherwise the call will fail.
    /// @param smart_contract: The smart contract to be unstaked from.
    /// @param amount: The amount of tokens to be unstaked.
    function unstake(
        SmartContract calldata smart_contract,
        uint128 amount
    ) external returns (bool);

    /// @notice Claims one or more pending staker rewards.
    function claim_staker_rewards() external returns (bool);

    /// @notice Claim the bonus reward for the specified smart contract.
    /// @param smart_contract: The smart contract for which the bonus reward should be claimed.
    function claim_bonus_reward(
        SmartContract calldata smart_contract
    ) external returns (bool);

    /// @notice Claim dApp reward for the specified smart contract & era.
    /// @param smart_contract: The smart contract for which the dApp reward should be claimed.
    /// @param era: The era for which the dApp reward should be claimed.
    function claim_dapp_reward(
        SmartContract calldata smart_contract,
        uint256 era
    ) external returns (bool);

    /// @notice Unstake all funds from the unregistered smart contract.
    /// @param smart_contract: The smart contract which was unregistered and from which all funds should be unstaked.
    function unstake_from_unregistered(
        SmartContract calldata smart_contract
    ) external returns (bool);

    /// @notice Used to cleanup all expired contract stake entries from the caller.
    function cleanup_expired_entries() external returns (bool);
}

contract dappStakingInteraction {
    dappStakingPrecompile.ProtocolState public protocolStateValue;
    uint public unlockingPeriodValue;

    dappStakingPrecompile public constant DAPPS_STAKING =
        dappStakingPrecompile(0x0000000000000000000000000000000000005001);

    mapping(address => uint128) public balance;

    function getProtocolStateValue() public 
    {
        //function protocol_state() external view returns (ProtocolState memory);
        dappStakingPrecompile.ProtocolState memory value = DAPPS_STAKING.protocol_state();
    }

    // function getAndUpdateProtocolStateValue() public view returns(ProtocolState memory)
    // {
    //     return DAPPS_STAKING.protocol_state();
    // }

    function getUnlockingPeriod() public view returns (uint) 
    {
        return DAPPS_STAKING.unlocking_period();
    }

    function getAndUpdateUnlockingPeriod() public 
    {
        uint value = DAPPS_STAKING.unlocking_period();
        unlockingPeriodValue = value;
    }

    function lockFunds(uint128 paramQuantityToLock) public 
    {
        DAPPS_STAKING.lock(paramQuantityToLock);
    }

    function stakeFunds(uint128 paramAmount) public
    {
        dappStakingPrecompile.SmartContractType evmType = dappStakingPrecompile.SmartContractType(0);
        address scAddress = address(this);
        bytes memory bytesAddress = abi.encodePacked(scAddress);
        dappStakingPrecompile.SmartContract memory sc = dappStakingPrecompile.SmartContract(evmType, bytesAddress);

        DAPPS_STAKING.stake(sc, paramAmount);
    }

    function deposit() public payable 
    {
    }

    function withdraw() public 
    {
        (msg.sender).call{value: (balance[msg.sender])}("");
    }
}












/////////////////////////////////////////////////////////////////////////

// SPDX-License-Identifier: MIT

pragma solidity 0.8.24;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol";

contract astarUsd is ERC20, ERC20Burnable, Ownable, ERC20Permit 
{
    constructor(address initialOwner)
        ERC20("astarUsd", "astarUsd")
        Ownable(initialOwner)
        ERC20Permit("astarUsd")
    {}

    function mint(address to, uint256 amount) public onlyOwner 
    {
        _mint(to, amount);
    }

    function getAddress() public view returns(address)
    {
        return address(this);
    }
}




pragma solidity 0.8.24;

import "@openzeppelin/contracts/access/Ownable.sol";


interface nastrLiquidStakingSc
{
    function mintNote(address to, uint256 amount, string memory utility) external;
}

interface diaOracleInterface
{
    function getValue(string memory key) external view returns (uint128, uint128);
}

contract astarVault is Ownable
{
    address public NASTR_LIQUID_STAKING_AND_NASTR_TOKEN_ADDRESS;
    address public DIA_ORACLE_SC_ADDRESS = 0x1232AcD632Dd75f874E357c77295Da3f5Cd7733E;

    astarUsd astrUsd;


    mapping(address => uint) public userUsedNastrToMintStablecoin;
    mapping(address => uint) public userNastrOnVault;





    constructor() Ownable(msg.sender)
    {
        astrUsd = new astarUsd(address(this));
    }



    function getAstrPrice() public view returns(uint128)
    {
        (uint128 value, uint128 valueTwo) = diaOracleInterface(DIA_ORACLE_SC_ADDRESS).getValue("ASTR/USD");
        return value;
    }

    function getAstrPriceWith18Decimals() public view returns(uint)
    {
        uint128 value = getAstrPrice();
        uint value18Decimals = (uint(value) * (10 ** 10));

        return value18Decimals;
    }

    function getAstrToStablecoin(uint paramAstrQuantityToUse) public view returns(uint)
    {
        uint collateralValue = (paramAstrQuantityToUse * getAstrPriceWith18Decimals()) / (1 ether);
        uint usdToMint = collateralValue / 2;
        return usdToMint;
    }

    function setNastrLiquidStakingScAddress(address paramNastrScAddress) public onlyOwner
    {
        NASTR_LIQUID_STAKING_AND_NASTR_TOKEN_ADDRESS = paramNastrScAddress;
    }

    function mintAstarUsdStablecoin() public payable
    {
        uint nAstr = msg.value;
        string memory note = "liquidStakingCollateral";

        nastrLiquidStakingSc(NASTR_LIQUID_STAKING_AND_NASTR_TOKEN_ADDRESS).mintNote(address(this), msg.value, note);     //depositETH{value: msg.value}(address(this));

        userUsedNastrToMintStablecoin[msg.sender] += nAstr;
        userNastrOnVault[msg.sender] += nAstr;

        uint astarUsdToMint = getAstrToStablecoin(msg.value);

        astrUsd.mint(msg.sender, astarUsdToMint);
    }

    function getAstarUsdStablecoinAddress() public view returns(address)
    {
        return astrUsd.getAddress();
    }
}